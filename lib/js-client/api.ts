/* tslint:disable */
/* eslint-disable */
/**
 * Console API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * ApplyParameterCameraFileToDevice Json Body
 * @export
 * @interface ApplyParameterCameraFileToDeviceJsonBody
 */
export interface ApplyParameterCameraFileToDeviceJsonBody {
    /**
     * Device Ids
     * @type {string}
     * @memberof ApplyParameterCameraFileToDeviceJsonBody
     */
    'device_ids': string;
}
/**
 * CancelParameterCameraFile Json Body
 * @export
 * @interface CancelParameterCameraFileJsonBody
 */
export interface CancelParameterCameraFileJsonBody {
    /**
     * Device Ids
     * @type {string}
     * @memberof CancelParameterCameraFileJsonBody
     */
    'device_ids': string;
}
/**
 * ChangePassword API json_body
 * @export
 * @interface ChangePasswordJsonBody
 */
export interface ChangePasswordJsonBody {
    /**
     * Pass
     * @type {string}
     * @memberof ChangePasswordJsonBody
     */
    'password': string;
}
/**
 * CreateCameraCustomSetupFile Json Body
 * @export
 * @interface CreateCameraCustomSetupFileJsonBody
 */
export interface CreateCameraCustomSetupFileJsonBody {
    /**
     * Type
     * @type {string}
     * @memberof CreateCameraCustomSetupFileJsonBody
     */
    'type'?: string;
    /**
     * File Name
     * @type {string}
     * @memberof CreateCameraCustomSetupFileJsonBody
     */
    'file_name': string;
    /**
     * Contents
     * @type {string}
     * @memberof CreateCameraCustomSetupFileJsonBody
     */
    'contents': string;
    /**
     * Comment
     * @type {string}
     * @memberof CreateCameraCustomSetupFileJsonBody
     */
    'comment'?: string;
}
/**
 * CreateFirmware API model
 * @export
 * @interface CreateFirmwareJsonBody
 */
export interface CreateFirmwareJsonBody {
    /**
     * Firmware Type
     * @type {string}
     * @memberof CreateFirmwareJsonBody
     */
    'firmware_type'?: string;
    /**
     * Version Number
     * @type {string}
     * @memberof CreateFirmwareJsonBody
     */
    'version_number'?: string;
    /**
     * Comment
     * @type {string}
     * @memberof CreateFirmwareJsonBody
     */
    'comment'?: string;
    /**
     * File Name
     * @type {string}
     * @memberof CreateFirmwareJsonBody
     */
    'file_name'?: string;
    /**
     * File Content
     * @type {string}
     * @memberof CreateFirmwareJsonBody
     */
    'file_content'?: string;
}
/**
 * DeployDeviceApp Json Body
 * @export
 * @interface DeployDeviceAppJsonBody
 */
export interface DeployDeviceAppJsonBody {
    /**
     * App name
     * @type {string}
     * @memberof DeployDeviceAppJsonBody
     */
    'app_name': string;
    /**
     * App version number
     * @type {string}
     * @memberof DeployDeviceAppJsonBody
     */
    'version_number': string;
    /**
     * Device Ids
     * @type {string}
     * @memberof DeployDeviceAppJsonBody
     */
    'device_ids': string;
    /**
     * Deploy parameter
     * @type {string}
     * @memberof DeployDeviceAppJsonBody
     */
    'deploy_parameter'?: string;
    /**
     * Comment
     * @type {string}
     * @memberof DeployDeviceAppJsonBody
     */
    'comment'?: string;
}
/**
 * EnrollDevice Json Body
 * @export
 * @interface EnrollDeviceJsonBody
 */
export interface EnrollDeviceJsonBody {
    /**
     * Device Name
     * @type {string}
     * @memberof EnrollDeviceJsonBody
     */
    'device_name': string;
    /**
     * Device Type
     * @type {string}
     * @memberof EnrollDeviceJsonBody
     */
    'device_type': string;
    /**
     * Primary Certificate
     * @type {string}
     * @memberof EnrollDeviceJsonBody
     */
    'primary_certificate': string;
}
/**
 * 
 * @export
 * @interface ErrorResponse
 */
export interface ErrorResponse {
    /**
     * todo
     * @type {string}
     * @memberof ErrorResponse
     */
    'result': string;
    /**
     * todo
     * @type {string}
     * @memberof ErrorResponse
     */
    'code': string;
    /**
     * todo
     * @type {string}
     * @memberof ErrorResponse
     */
    'message': string;
    /**
     * todo
     * @type {string}
     * @memberof ErrorResponse
     */
    'time': string;
}
/**
 * 
 * @export
 * @interface GetCommandParameter200Response
 */
export interface GetCommandParameter200Response {
    /**
     * 
     * @type {Array<GetCommandParameter200ResponseParameterListInner>}
     * @memberof GetCommandParameter200Response
     */
    'parameter_list': Array<GetCommandParameter200ResponseParameterListInner>;
}
/**
 * 
 * @export
 * @interface GetCommandParameter200ResponseParameterListInner
 */
export interface GetCommandParameter200ResponseParameterListInner {
    /**
     * 
     * @type {GetCommandParameter200ResponseParameterListInnerParameter}
     * @memberof GetCommandParameter200ResponseParameterListInner
     */
    'parameter': GetCommandParameter200ResponseParameterListInnerParameter;
    /**
     * File name
     * @type {string}
     * @memberof GetCommandParameter200ResponseParameterListInner
     */
    'file_name': string;
    /**
     * Comment
     * @type {string}
     * @memberof GetCommandParameter200ResponseParameterListInner
     */
    'comment'?: string;
    /**
     * Default file flg
     * @type {string}
     * @memberof GetCommandParameter200ResponseParameterListInner
     */
    'isdefault': string;
    /**
     * Target device list.
     * @type {Array<string>}
     * @memberof GetCommandParameter200ResponseParameterListInner
     */
    'device_ids'?: Array<string>;
    /**
     * Set the author of the configuration.
     * @type {string}
     * @memberof GetCommandParameter200ResponseParameterListInner
     */
    'ins_id': string;
    /**
     * Set the creation date and time for the configuration.
     * @type {string}
     * @memberof GetCommandParameter200ResponseParameterListInner
     */
    'ins_date': string;
    /**
     * Set the settings updater.
     * @type {string}
     * @memberof GetCommandParameter200ResponseParameterListInner
     */
    'upd_id': string;
    /**
     * Set the update date and time for the setting.
     * @type {string}
     * @memberof GetCommandParameter200ResponseParameterListInner
     */
    'upd_date': string;
}
/**
 * 
 * @export
 * @interface GetCommandParameter200ResponseParameterListInnerParameter
 */
export interface GetCommandParameter200ResponseParameterListInnerParameter {
    /**
     * 
     * @type {Array<GetCommandParameter200ResponseParameterListInnerParameterCommandsInner>}
     * @memberof GetCommandParameter200ResponseParameterListInnerParameter
     */
    'commands': Array<GetCommandParameter200ResponseParameterListInnerParameterCommandsInner>;
}
/**
 * 
 * @export
 * @interface GetCommandParameter200ResponseParameterListInnerParameterCommandsInner
 */
export interface GetCommandParameter200ResponseParameterListInnerParameterCommandsInner {
    /**
     * todo
     * @type {string}
     * @memberof GetCommandParameter200ResponseParameterListInnerParameterCommandsInner
     */
    'command_name': string;
    /**
     * 
     * @type {GetCommandParameter200ResponseParameterListInnerParameterCommandsInnerParameters}
     * @memberof GetCommandParameter200ResponseParameterListInnerParameterCommandsInner
     */
    'parameters': GetCommandParameter200ResponseParameterListInnerParameterCommandsInnerParameters;
}
/**
 * 
 * @export
 * @interface GetCommandParameter200ResponseParameterListInnerParameterCommandsInnerParameters
 */
export interface GetCommandParameter200ResponseParameterListInnerParameterCommandsInnerParameters {
    /**
     * todo
     * @type {number}
     * @memberof GetCommandParameter200ResponseParameterListInnerParameterCommandsInnerParameters
     */
    'Mode'?: number;
    /**
     * todo
     * @type {string}
     * @memberof GetCommandParameter200ResponseParameterListInnerParameterCommandsInnerParameters
     */
    'UploadMethod'?: string;
    /**
     * todo
     * @type {string}
     * @memberof GetCommandParameter200ResponseParameterListInnerParameterCommandsInnerParameters
     */
    'FileFormat'?: string;
    /**
     * todo
     * @type {string}
     * @memberof GetCommandParameter200ResponseParameterListInnerParameterCommandsInnerParameters
     */
    'UploadMethodIR'?: string;
    /**
     * todo
     * @type {number}
     * @memberof GetCommandParameter200ResponseParameterListInnerParameterCommandsInnerParameters
     */
    'CropHOffset'?: number;
    /**
     * todo
     * @type {number}
     * @memberof GetCommandParameter200ResponseParameterListInnerParameterCommandsInnerParameters
     */
    'CropVOffset'?: number;
    /**
     * todo
     * @type {number}
     * @memberof GetCommandParameter200ResponseParameterListInnerParameterCommandsInnerParameters
     */
    'CropHSize'?: number;
    /**
     * todo
     * @type {number}
     * @memberof GetCommandParameter200ResponseParameterListInnerParameterCommandsInnerParameters
     */
    'CropVSize'?: number;
    /**
     * todo
     * @type {number}
     * @memberof GetCommandParameter200ResponseParameterListInnerParameterCommandsInnerParameters
     */
    'NumberOfImages'?: number;
    /**
     * todo
     * @type {number}
     * @memberof GetCommandParameter200ResponseParameterListInnerParameterCommandsInnerParameters
     */
    'UploadInterval'?: number;
    /**
     * todo
     * @type {number}
     * @memberof GetCommandParameter200ResponseParameterListInnerParameterCommandsInnerParameters
     */
    'NumberOfInferencesPerMessage'?: number;
    /**
     * todo
     * @type {number}
     * @memberof GetCommandParameter200ResponseParameterListInnerParameterCommandsInnerParameters
     */
    'MaxDetectionsPerFrame'?: number;
    /**
     * todo
     * @type {string}
     * @memberof GetCommandParameter200ResponseParameterListInnerParameterCommandsInnerParameters
     */
    'ModelId'?: string;
    /**
     * todo
     * @type {object}
     * @memberof GetCommandParameter200ResponseParameterListInnerParameterCommandsInnerParameters
     */
    'PPLParameter'?: object;
}
/**
 * 
 * @export
 * @interface GetDeviceAppsResponse
 */
export interface GetDeviceAppsResponse {
    /**
     * 
     * @type {Array<GetDeviceAppsResponseApps>}
     * @memberof GetDeviceAppsResponse
     */
    'apps': Array<GetDeviceAppsResponseApps>;
}
/**
 * 
 * @export
 * @interface GetDeviceAppsResponseApps
 */
export interface GetDeviceAppsResponseApps {
    /**
     * 
     * @type {string}
     * @memberof GetDeviceAppsResponseApps
     */
    'name': string;
    /**
     * 
     * @type {Array<GetDeviceAppsResponseVersions>}
     * @memberof GetDeviceAppsResponseApps
     */
    'versions': Array<GetDeviceAppsResponseVersions>;
}
/**
 * 
 * @export
 * @interface GetDeviceAppsResponseVersions
 */
export interface GetDeviceAppsResponseVersions {
    /**
     * 
     * @type {string}
     * @memberof GetDeviceAppsResponseVersions
     */
    'version': string;
    /**
     * 
     * @type {string}
     * @memberof GetDeviceAppsResponseVersions
     */
    'compiled_flg': string;
    /**
     * 
     * @type {string}
     * @memberof GetDeviceAppsResponseVersions
     */
    'status': string;
    /**
     * 
     * @type {string}
     * @memberof GetDeviceAppsResponseVersions
     */
    'comment': string;
    /**
     * 
     * @type {string}
     * @memberof GetDeviceAppsResponseVersions
     */
    'deploy_count': string;
    /**
     * 
     * @type {string}
     * @memberof GetDeviceAppsResponseVersions
     */
    'ins_id': string;
    /**
     * 
     * @type {string}
     * @memberof GetDeviceAppsResponseVersions
     */
    'ins_date': string;
    /**
     * 
     * @type {string}
     * @memberof GetDeviceAppsResponseVersions
     */
    'upd_id': string;
    /**
     * 
     * @type {string}
     * @memberof GetDeviceAppsResponseVersions
     */
    'upd_date': string;
}
/**
 * 
 * @export
 * @interface GetDevices200Response
 */
export interface GetDevices200Response {
    /**
     * 
     * @type {Array<GetDevices200ResponseDevicesInner>}
     * @memberof GetDevices200Response
     */
    'devices': Array<GetDevices200ResponseDevicesInner>;
}
/**
 * 
 * @export
 * @interface GetDevices200ResponseDevicesInner
 */
export interface GetDevices200ResponseDevicesInner {
    /**
     * todo
     * @type {string}
     * @memberof GetDevices200ResponseDevicesInner
     */
    'device_id': string;
    /**
     * todo
     * @type {string}
     * @memberof GetDevices200ResponseDevicesInner
     */
    'place'?: string;
    /**
     * todo
     * @type {string}
     * @memberof GetDevices200ResponseDevicesInner
     */
    'comment'?: string;
    /**
     * 
     * @type {GetDevices200ResponseDevicesInnerProperty}
     * @memberof GetDevices200ResponseDevicesInner
     */
    'property'?: GetDevices200ResponseDevicesInnerProperty;
    /**
     * todo
     * @type {string}
     * @memberof GetDevices200ResponseDevicesInner
     */
    'ins_id': string;
    /**
     * todo
     * @type {string}
     * @memberof GetDevices200ResponseDevicesInner
     */
    'ins_date': string;
    /**
     * todo
     * @type {string}
     * @memberof GetDevices200ResponseDevicesInner
     */
    'upd_id': string;
    /**
     * todo
     * @type {string}
     * @memberof GetDevices200ResponseDevicesInner
     */
    'upd_date': string;
    /**
     * todo
     * @type {string}
     * @memberof GetDevices200ResponseDevicesInner
     */
    'connectionState': string;
    /**
     * todo
     * @type {string}
     * @memberof GetDevices200ResponseDevicesInner
     */
    'lastActivityTime': string;
    /**
     * 
     * @type {Array<GetDevices200ResponseDevicesInnerModelsInner>}
     * @memberof GetDevices200ResponseDevicesInner
     */
    'models'?: Array<GetDevices200ResponseDevicesInnerModelsInner>;
    /**
     * 
     * @type {Array<GetDevices200ResponseDevicesInnerDeviceGroupsInner>}
     * @memberof GetDevices200ResponseDevicesInner
     */
    'device_groups'?: Array<GetDevices200ResponseDevicesInnerDeviceGroupsInner>;
}
/**
 * 
 * @export
 * @interface GetDevices200ResponseDevicesInnerDeviceGroupsInner
 */
export interface GetDevices200ResponseDevicesInnerDeviceGroupsInner {
    /**
     * todo
     * @type {string}
     * @memberof GetDevices200ResponseDevicesInnerDeviceGroupsInner
     */
    'device_group_id': string;
    /**
     * todo
     * @type {string}
     * @memberof GetDevices200ResponseDevicesInnerDeviceGroupsInner
     */
    'device_type': string;
    /**
     * todo
     * @type {string}
     * @memberof GetDevices200ResponseDevicesInnerDeviceGroupsInner
     */
    'comment'?: string;
    /**
     * todo
     * @type {string}
     * @memberof GetDevices200ResponseDevicesInnerDeviceGroupsInner
     */
    'ins_id': string;
    /**
     * todo
     * @type {string}
     * @memberof GetDevices200ResponseDevicesInnerDeviceGroupsInner
     */
    'ins_date': string;
    /**
     * todo
     * @type {string}
     * @memberof GetDevices200ResponseDevicesInnerDeviceGroupsInner
     */
    'upd_id': string;
    /**
     * todo
     * @type {string}
     * @memberof GetDevices200ResponseDevicesInnerDeviceGroupsInner
     */
    'upd_date': string;
}
/**
 * 
 * @export
 * @interface GetDevices200ResponseDevicesInnerModelsInner
 */
export interface GetDevices200ResponseDevicesInnerModelsInner {
    /**
     * todo
     * @type {string}
     * @memberof GetDevices200ResponseDevicesInnerModelsInner
     */
    'model_version_id'?: string;
}
/**
 * 
 * @export
 * @interface GetDevices200ResponseDevicesInnerProperty
 */
export interface GetDevices200ResponseDevicesInnerProperty {
    /**
     * todo
     * @type {string}
     * @memberof GetDevices200ResponseDevicesInnerProperty
     */
    'device_name': string;
    /**
     * todo
     * @type {string}
     * @memberof GetDevices200ResponseDevicesInnerProperty
     */
    'internal_device_id': string;
}
/**
 * 
 * @export
 * @interface GetImageDirectories200ResponseInner
 */
export interface GetImageDirectories200ResponseInner {
    /**
     * todo
     * @type {string}
     * @memberof GetImageDirectories200ResponseInner
     */
    'group_id': string;
    /**
     * todo
     * @type {Array<GetImageDirectories200ResponseInnerDevicesInner>}
     * @memberof GetImageDirectories200ResponseInner
     */
    'devices': Array<GetImageDirectories200ResponseInnerDevicesInner>;
}
/**
 * 
 * @export
 * @interface GetImageDirectories200ResponseInnerDevicesInner
 */
export interface GetImageDirectories200ResponseInnerDevicesInner {
    /**
     * todo
     * @type {string}
     * @memberof GetImageDirectories200ResponseInnerDevicesInner
     */
    'device_id': string;
    /**
     * todo
     * @type {string}
     * @memberof GetImageDirectories200ResponseInnerDevicesInner
     */
    'device_name': string;
    /**
     * todo
     * @type {Array<string>}
     * @memberof GetImageDirectories200ResponseInnerDevicesInner
     */
    'Image': Array<string>;
}
/**
 * 
 * @export
 * @interface GetImages200Response
 */
export interface GetImages200Response {
    /**
     * todo
     * @type {number}
     * @memberof GetImages200Response
     */
    'total_image_count': number;
    /**
     * 
     * @type {Array<GetImages200ResponseImagesInner>}
     * @memberof GetImages200Response
     */
    'images': Array<GetImages200ResponseImagesInner>;
}
/**
 * 
 * @export
 * @interface GetImages200ResponseImagesInner
 */
export interface GetImages200ResponseImagesInner {
    /**
     * todo
     * @type {string}
     * @memberof GetImages200ResponseImagesInner
     */
    'name': string;
    /**
     * todo
     * @type {string}
     * @memberof GetImages200ResponseImagesInner
     */
    'contents': string;
}
/**
 * 
 * @export
 * @interface GetInferenceResults200ResponseInner
 */
export interface GetInferenceResults200ResponseInner {
    /**
     * 
     * @type {string}
     * @memberof GetInferenceResults200ResponseInner
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetInferenceResults200ResponseInner
     */
    'device_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetInferenceResults200ResponseInner
     */
    'model_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetInferenceResults200ResponseInner
     */
    'version_number'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetInferenceResults200ResponseInner
     */
    'model_version_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetInferenceResults200ResponseInner
     */
    'model_type'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetInferenceResults200ResponseInner
     */
    'training_kit_name'?: string;
    /**
     * 
     * @type {number}
     * @memberof GetInferenceResults200ResponseInner
     */
    '_ts'?: number;
    /**
     * 
     * @type {GetInferenceResults200ResponseInnerInferenceResult}
     * @memberof GetInferenceResults200ResponseInner
     */
    'inference_result'?: GetInferenceResults200ResponseInnerInferenceResult;
    /**
     * todo
     * @type {Array<Inference>}
     * @memberof GetInferenceResults200ResponseInner
     */
    'inferences'?: Array<Inference>;
}
/**
 * 
 * @export
 * @interface GetInferenceResults200ResponseInnerInferenceResult
 */
export interface GetInferenceResults200ResponseInnerInferenceResult {
    /**
     * 
     * @type {string}
     * @memberof GetInferenceResults200ResponseInnerInferenceResult
     */
    'DeviceID'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetInferenceResults200ResponseInnerInferenceResult
     */
    'ModelID'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof GetInferenceResults200ResponseInnerInferenceResult
     */
    'Image'?: boolean;
    /**
     * todo
     * @type {Array<Inference>}
     * @memberof GetInferenceResults200ResponseInnerInferenceResult
     */
    'Inferences'?: Array<Inference>;
    /**
     * 
     * @type {string}
     * @memberof GetInferenceResults200ResponseInnerInferenceResult
     */
    'id'?: string;
    /**
     * 
     * @type {number}
     * @memberof GetInferenceResults200ResponseInnerInferenceResult
     */
    'ttl'?: number;
    /**
     * 
     * @type {string}
     * @memberof GetInferenceResults200ResponseInnerInferenceResult
     */
    '_rid'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetInferenceResults200ResponseInnerInferenceResult
     */
    '_self'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetInferenceResults200ResponseInnerInferenceResult
     */
    '_etag'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetInferenceResults200ResponseInnerInferenceResult
     */
    '_attachments'?: string;
    /**
     * 
     * @type {number}
     * @memberof GetInferenceResults200ResponseInnerInferenceResult
     */
    '_ts'?: number;
}
/**
 * 
 * @export
 * @interface HTTPValidationError
 */
export interface HTTPValidationError {
    /**
     * 
     * @type {Array<ValidationError>}
     * @memberof HTTPValidationError
     */
    'detail'?: Array<ValidationError>;
}
/**
 * ImportCameraConfigurationFile Json Body
 * @export
 * @interface ImportCameraConfigurationFileJsonBody
 */
export interface ImportCameraConfigurationFileJsonBody {
    /**
     * Contents
     * @type {string}
     * @memberof ImportCameraConfigurationFileJsonBody
     */
    'contents': string;
    /**
     * File name
     * @type {string}
     * @memberof ImportCameraConfigurationFileJsonBody
     */
    'file_name': string;
    /**
     * Comment
     * @type {string}
     * @memberof ImportCameraConfigurationFileJsonBody
     */
    'comment': string;
}
/**
 * ImportDeviceApp Json Body
 * @export
 * @interface ImportDeviceAppJsonBody
 */
export interface ImportDeviceAppJsonBody {
    /**
     * Compiled flg(0:not compiled, 1:Compiled)
     * @type {string}
     * @memberof ImportDeviceAppJsonBody
     */
    'compiled_flg': string;
    /**
     * App entry point
     * @type {string}
     * @memberof ImportDeviceAppJsonBody
     */
    'entry_point'?: string;
    /**
     * App name
     * @type {string}
     * @memberof ImportDeviceAppJsonBody
     */
    'app_name': string;
    /**
     * App version number123
     * @type {string}
     * @memberof ImportDeviceAppJsonBody
     */
    'version_number': string;
    /**
     * Comment
     * @type {string}
     * @memberof ImportDeviceAppJsonBody
     */
    'comment'?: string;
    /**
     * File name
     * @type {string}
     * @memberof ImportDeviceAppJsonBody
     */
    'file_name': string;
    /**
     * File content
     * @type {string}
     * @memberof ImportDeviceAppJsonBody
     */
    'file_content': string;
}
/**
 * 
 * @export
 * @interface Inference
 */
export interface Inference {
    /**
     * 
     * @type {Inference1}
     * @memberof Inference
     */
    '1'?: Inference1;
    /**
     * 
     * @type {Inference1}
     * @memberof Inference
     */
    '2'?: Inference1;
    /**
     * 
     * @type {Inference1}
     * @memberof Inference
     */
    '3'?: Inference1;
    /**
     * 
     * @type {Inference1}
     * @memberof Inference
     */
    '4'?: Inference1;
    /**
     * 
     * @type {Inference1}
     * @memberof Inference
     */
    '5'?: Inference1;
    /**
     * todo
     * @type {string}
     * @memberof Inference
     */
    'T'?: string;
    /**
     * todo
     * @type {string}
     * @memberof Inference
     */
    'O'?: string;
}
/**
 * todo
 * @export
 * @interface Inference1
 */
export interface Inference1 {
    /**
     * todo
     * @type {number}
     * @memberof Inference1
     */
    'C'?: number;
    /**
     * todo
     * @type {number}
     * @memberof Inference1
     */
    'P'?: number;
    /**
     * todo
     * @type {number}
     * @memberof Inference1
     */
    'X'?: number;
    /**
     * todo
     * @type {number}
     * @memberof Inference1
     */
    'Y'?: number;
    /**
     * todo
     * @type {number}
     * @memberof Inference1
     */
    'x'?: number;
    /**
     * todo
     * @type {number}
     * @memberof Inference1
     */
    'y'?: number;
}
/**
 * 
 * @export
 * @interface LocationInner
 */
export interface LocationInner {
}
/**
 * RegistCommandParameter Json Body
 * @export
 * @interface RegistCommandParameterBody
 */
export interface RegistCommandParameterBody {
    /**
     * File Name
     * @type {string}
     * @memberof RegistCommandParameterBody
     */
    'file_name': string;
    /**
     * Parameter
     * @type {string}
     * @memberof RegistCommandParameterBody
     */
    'parameter': string;
    /**
     * Comment
     * @type {string}
     * @memberof RegistCommandParameterBody
     */
    'comment'?: string;
}
/**
 * 
 * @export
 * @interface StartUploadInferenceResult200Response
 */
export interface StartUploadInferenceResult200Response {
    /**
     * todo
     * @type {string}
     * @memberof StartUploadInferenceResult200Response
     */
    'result': string;
    /**
     * todo
     * @type {string}
     * @memberof StartUploadInferenceResult200Response
     */
    'outputSubDirectory'?: string;
}
/**
 * 
 * @export
 * @interface SuccessResponse
 */
export interface SuccessResponse {
    /**
     * todo
     * @type {string}
     * @memberof SuccessResponse
     */
    'result': string;
}
/**
 * CreateProjectImageRegions API json_body class.  Attributes: ---------- regions(list): region list.
 * @export
 * @interface TrainModelCreateProjectImageRegionsDataCreateprojectimageregionsindtoJsonBody
 */
export interface TrainModelCreateProjectImageRegionsDataCreateprojectimageregionsindtoJsonBody {
    /**
     * 
     * @type {Array<object>}
     * @memberof TrainModelCreateProjectImageRegionsDataCreateprojectimageregionsindtoJsonBody
     */
    'regions'?: Array<object>;
}
/**
 * ImportBaseModel API json_body class.  Attributes: ---------- model_id(str): model_id. url(str): url. model(str): model file name. converted(bool): converted flag. vendor_name(str): vendor_name. comment(str): comment. network_parameter(str): network_parameter file name. network_config(str): network_config file name. network_type(str): network type. labels(str): labels.
 * @export
 * @interface TrainModelImportBaseModelDataImportbasemodelindtoJsonBody
 */
export interface TrainModelImportBaseModelDataImportbasemodelindtoJsonBody {
    /**
     * 
     * @type {string}
     * @memberof TrainModelImportBaseModelDataImportbasemodelindtoJsonBody
     */
    'model_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof TrainModelImportBaseModelDataImportbasemodelindtoJsonBody
     */
    'model'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof TrainModelImportBaseModelDataImportbasemodelindtoJsonBody
     */
    'converted'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof TrainModelImportBaseModelDataImportbasemodelindtoJsonBody
     */
    'vendor_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof TrainModelImportBaseModelDataImportbasemodelindtoJsonBody
     */
    'comment'?: string;
    /**
     * 
     * @type {string}
     * @memberof TrainModelImportBaseModelDataImportbasemodelindtoJsonBody
     */
    'network_parameter'?: string;
    /**
     * 
     * @type {string}
     * @memberof TrainModelImportBaseModelDataImportbasemodelindtoJsonBody
     */
    'network_config'?: string;
    /**
     * 
     * @type {string}
     * @memberof TrainModelImportBaseModelDataImportbasemodelindtoJsonBody
     */
    'network_type'?: string;
    /**
     * 
     * @type {Array<any>}
     * @memberof TrainModelImportBaseModelDataImportbasemodelindtoJsonBody
     */
    'labels'?: Array<any>;
}
/**
 * ImportImagesFromBlobFolder API json_body class.  Attributes: ---------- tags_name(list): tag name list. folder_path(str): container folder path.
 * @export
 * @interface TrainModelImportImagesFromBlobFolderDataImportimagesfromblobfolderindtoJsonBody
 */
export interface TrainModelImportImagesFromBlobFolderDataImportimagesfromblobfolderindtoJsonBody {
    /**
     * 
     * @type {Array<any>}
     * @memberof TrainModelImportImagesFromBlobFolderDataImportimagesfromblobfolderindtoJsonBody
     */
    'tags_name'?: Array<any>;
    /**
     * 
     * @type {string}
     * @memberof TrainModelImportImagesFromBlobFolderDataImportimagesfromblobfolderindtoJsonBody
     */
    'folder_path': string;
}
/**
 * ImportImagesFromFiles API json_body class.  Attributes: ---------- tags_name(list): tag name list. images(list): images.
 * @export
 * @interface TrainModelImportImagesFromFilesDataImportimagesfromfilesindtoJsonBody
 */
export interface TrainModelImportImagesFromFilesDataImportimagesfromfilesindtoJsonBody {
    /**
     * 
     * @type {Array<any>}
     * @memberof TrainModelImportImagesFromFilesDataImportimagesfromfilesindtoJsonBody
     */
    'tags_name'?: Array<any>;
    /**
     * 
     * @type {Array<any>}
     * @memberof TrainModelImportImagesFromFilesDataImportimagesfromfilesindtoJsonBody
     */
    'images': Array<any>;
}
/**
 * ImportImagesFromScblob API json_body class.  Attributes: ---------- tags_name(list): tag name list. container_url(str): container url.
 * @export
 * @interface TrainModelImportImagesFromScblobDataImportimagesfromscblobindtoJsonBody
 */
export interface TrainModelImportImagesFromScblobDataImportimagesfromscblobindtoJsonBody {
    /**
     * 
     * @type {Array<any>}
     * @memberof TrainModelImportImagesFromScblobDataImportimagesfromscblobindtoJsonBody
     */
    'tags_name'?: Array<any>;
    /**
     * 
     * @type {string}
     * @memberof TrainModelImportImagesFromScblobDataImportimagesfromscblobindtoJsonBody
     */
    'container_url': string;
}
/**
 * Update Base Model API json_body class.  Attributes: ---------- comment(str): comment. network_parameter(str): network_parameter file name. network_config(str): network_config file name.
 * @export
 * @interface TrainModelUpdateBaseModelVersionDataUpdatebasemodelversionindtoJsonBody
 */
export interface TrainModelUpdateBaseModelVersionDataUpdatebasemodelversionindtoJsonBody {
    /**
     * 
     * @type {string}
     * @memberof TrainModelUpdateBaseModelVersionDataUpdatebasemodelversionindtoJsonBody
     */
    'comment'?: string;
    /**
     * 
     * @type {string}
     * @memberof TrainModelUpdateBaseModelVersionDataUpdatebasemodelversionindtoJsonBody
     */
    'network_parameter'?: string;
    /**
     * 
     * @type {string}
     * @memberof TrainModelUpdateBaseModelVersionDataUpdatebasemodelversionindtoJsonBody
     */
    'network_config'?: string;
}
/**
 * Update Model API json_body class.  Attributes: ---------- comment(str): comment.
 * @export
 * @interface TrainModelUpdateDeviceModelVersionDataUpdatedevicemodelversionindtoJsonBody
 */
export interface TrainModelUpdateDeviceModelVersionDataUpdatedevicemodelversionindtoJsonBody {
    /**
     * 
     * @type {string}
     * @memberof TrainModelUpdateDeviceModelVersionDataUpdatedevicemodelversionindtoJsonBody
     */
    'comment': string;
}
/**
 * UpdateProjectImageRegions API json_body class.  Attributes: ---------- folder_path(str): container folder path.
 * @export
 * @interface TrainModelUpdateProjectImageRegionsDataUpdateprojectimageregionsindtoJsonBody
 */
export interface TrainModelUpdateProjectImageRegionsDataUpdateprojectimageregionsindtoJsonBody {
    /**
     * 
     * @type {Array<object>}
     * @memberof TrainModelUpdateProjectImageRegionsDataUpdateprojectimageregionsindtoJsonBody
     */
    'regions'?: Array<object>;
    /**
     * 
     * @type {Array<object>}
     * @memberof TrainModelUpdateProjectImageRegionsDataUpdateprojectimageregionsindtoJsonBody
     */
    'region_ids'?: Array<object>;
}
/**
 * UpdateProjectTag API json_body class.  Attributes: ---------- tag_dict(str): tag dict.
 * @export
 * @interface TrainModelUpdateProjectTagDataUpdateprojecttagindtoJsonBody
 */
export interface TrainModelUpdateProjectTagDataUpdateprojecttagindtoJsonBody {
    /**
     * 
     * @type {string}
     * @memberof TrainModelUpdateProjectTagDataUpdateprojecttagindtoJsonBody
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof TrainModelUpdateProjectTagDataUpdateprojecttagindtoJsonBody
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof TrainModelUpdateProjectTagDataUpdateprojecttagindtoJsonBody
     */
    'type': string;
}
/**
 * UpdateCommandParameter Json Body
 * @export
 * @interface UpdateCommandParameterBody
 */
export interface UpdateCommandParameterBody {
    /**
     * Parameter
     * @type {string}
     * @memberof UpdateCommandParameterBody
     */
    'parameter': string;
    /**
     * Comment
     * @type {string}
     * @memberof UpdateCommandParameterBody
     */
    'comment'?: string;
}
/**
 * UpdateDpsCertificate Json Body
 * @export
 * @interface UpdateDpsCertificateJsonBody
 */
export interface UpdateDpsCertificateJsonBody {
    /**
     * Primary Certificate
     * @type {string}
     * @memberof UpdateDpsCertificateJsonBody
     */
    'primary_certificate': string;
}
/**
 * 
 * @export
 * @interface ValidationError
 */
export interface ValidationError {
    /**
     * 
     * @type {Array<LocationInner>}
     * @memberof ValidationError
     */
    'loc': Array<LocationInner>;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    'msg': string;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    'type': string;
}

/**
 * CommandParameterFileApi - axios parameter creator
 * @export
 */
export const CommandParameterFileApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get Command Parameter.
         * @summary GetCommandParameter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCommandParameter: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/command_parameter_files`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication accessToken required

            // http bearer authentication required

            await setBearerAuthToObject(localVarHeaderParameter, configuration) // Added by SARD Team
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CommandParameterFileApi - functional programming interface
 * @export
 */
export const CommandParameterFileApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CommandParameterFileApiAxiosParamCreator(configuration)
    return {
        /**
         * Get Command Parameter.
         * @summary GetCommandParameter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCommandParameter(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetCommandParameter200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCommandParameter(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CommandParameterFileApi - factory interface
 * @export
 */
export const CommandParameterFileApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CommandParameterFileApiFp(configuration)
    return {
        /**
         * Get Command Parameter.
         * @summary GetCommandParameter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCommandParameter(options?: any): AxiosPromise<GetCommandParameter200Response> {
            return localVarFp.getCommandParameter(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CommandParameterFileApi - object-oriented interface
 * @export
 * @class CommandParameterFileApi
 * @extends {BaseAPI}
 */
export class CommandParameterFileApi extends BaseAPI {
    /**
     * Get Command Parameter.
     * @summary GetCommandParameter
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommandParameterFileApi
     */
    public getCommandParameter(options?: AxiosRequestConfig) {
        return CommandParameterFileApiFp(this.configuration).getCommandParameter(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * DeployApi - axios parameter creator
 * @export
 */
export const DeployApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create Deploy Configuration.
         * @summary CreateDeployConfiguration
         * @param {string} configId Config ID
         * @param {string} [comment] Comment
         * @param {string} [deviceType] Device type
         * @param {string} [sensorLoaderVersionNumber] Sensor loader version number
         * @param {string} [sensorVersionNumber] Sensor version number
         * @param {string} [modelId] Model id
         * @param {string} [modelVersionNumber] Model version number
         * @param {string} [colorMatrixMode] Color matrix mode
         * @param {string} [colorMatrixFileName] Color matrix file name
         * @param {string} [gammaMode] Gamma mode
         * @param {string} [gammaFileName] Gamma file name
         * @param {string} [lscispMode] Lscisp mode
         * @param {string} [lscispFileName] Lscisp file name
         * @param {string} [lscrawMode] Lscraw mode
         * @param {string} [lscrawFileName] Lscraw file name
         * @param {string} [prewbMode] Prewb mode
         * @param {string} [prewbFileName] Prewb file name
         * @param {string} [dewarpMode] Dewarp mode
         * @param {string} [dewarpFileName] Dewarp file name
         * @param {string} [apFwVersionNumber] Ap fw version number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDeployConfiguration: async (configId: string, comment?: string, deviceType?: string, sensorLoaderVersionNumber?: string, sensorVersionNumber?: string, modelId?: string, modelVersionNumber?: string, colorMatrixMode?: string, colorMatrixFileName?: string, gammaMode?: string, gammaFileName?: string, lscispMode?: string, lscispFileName?: string, lscrawMode?: string, lscrawFileName?: string, prewbMode?: string, prewbFileName?: string, dewarpMode?: string, dewarpFileName?: string, apFwVersionNumber?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'configId' is not null or undefined
            assertParamExists('createDeployConfiguration', 'configId', configId)
            const localVarPath = `/deployconfigurations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (configId !== undefined) {
                localVarQueryParameter['config_id'] = configId;
            }

            if (comment !== undefined) {
                localVarQueryParameter['comment'] = comment;
            }

            if (deviceType !== undefined) {
                localVarQueryParameter['device_type'] = deviceType;
            }

            if (sensorLoaderVersionNumber !== undefined) {
                localVarQueryParameter['sensor_loader_version_number'] = sensorLoaderVersionNumber;
            }

            if (sensorVersionNumber !== undefined) {
                localVarQueryParameter['sensor_version_number'] = sensorVersionNumber;
            }

            if (modelId !== undefined) {
                localVarQueryParameter['model_id'] = modelId;
            }

            if (modelVersionNumber !== undefined) {
                localVarQueryParameter['model_version_number'] = modelVersionNumber;
            }

            if (colorMatrixMode !== undefined) {
                localVarQueryParameter['color_matrix_mode'] = colorMatrixMode;
            }

            if (colorMatrixFileName !== undefined) {
                localVarQueryParameter['color_matrix_file_name'] = colorMatrixFileName;
            }

            if (gammaMode !== undefined) {
                localVarQueryParameter['gamma_mode'] = gammaMode;
            }

            if (gammaFileName !== undefined) {
                localVarQueryParameter['gamma_file_name'] = gammaFileName;
            }

            if (lscispMode !== undefined) {
                localVarQueryParameter['lscisp_mode'] = lscispMode;
            }

            if (lscispFileName !== undefined) {
                localVarQueryParameter['lscisp_file_name'] = lscispFileName;
            }

            if (lscrawMode !== undefined) {
                localVarQueryParameter['lscraw_mode'] = lscrawMode;
            }

            if (lscrawFileName !== undefined) {
                localVarQueryParameter['lscraw_file_name'] = lscrawFileName;
            }

            if (prewbMode !== undefined) {
                localVarQueryParameter['prewb_mode'] = prewbMode;
            }

            if (prewbFileName !== undefined) {
                localVarQueryParameter['prewb_file_name'] = prewbFileName;
            }

            if (dewarpMode !== undefined) {
                localVarQueryParameter['dewarp_mode'] = dewarpMode;
            }

            if (dewarpFileName !== undefined) {
                localVarQueryParameter['dewarp_file_name'] = dewarpFileName;
            }

            if (apFwVersionNumber !== undefined) {
                localVarQueryParameter['ap_fw_version_number'] = apFwVersionNumber;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete Deploy Configuration.
         * @summary DeleteDeployConfiguration
         * @param {string} configId Config ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDeployConfiguration: async (configId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'configId' is not null or undefined
            assertParamExists('deleteDeployConfiguration', 'configId', configId)
            const localVarPath = `/deployconfigurations/{config_id}`
                .replace(`{${"config_id"}}`, encodeURIComponent(String(configId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deploy By Configuration.
         * @summary DeployByConfiguration
         * @param {string} configId Config Id
         * @param {string} deviceIds Device Ids
         * @param {string} [replaceModelId] Replace Model Id
         * @param {string} [comment] Comment
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deployByConfiguration: async (configId: string, deviceIds: string, replaceModelId?: string, comment?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'configId' is not null or undefined
            assertParamExists('deployByConfiguration', 'configId', configId)
            // verify required parameter 'deviceIds' is not null or undefined
            assertParamExists('deployByConfiguration', 'deviceIds', deviceIds)
            const localVarPath = `/deployconfigurations/{config_id}`
                .replace(`{${"config_id"}}`, encodeURIComponent(String(configId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (deviceIds !== undefined) {
                localVarQueryParameter['device_ids'] = deviceIds;
            }

            if (replaceModelId !== undefined) {
                localVarQueryParameter['replace_model_id'] = replaceModelId;
            }

            if (comment !== undefined) {
                localVarQueryParameter['comment'] = comment;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deploy Device Cancel.
         * @summary DeployDeviceCancel
         * @param {string} deviceId Device Id
         * @param {string} deployId Deploy Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deployDeviceCancel: async (deviceId: string, deployId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'deviceId' is not null or undefined
            assertParamExists('deployDeviceCancel', 'deviceId', deviceId)
            // verify required parameter 'deployId' is not null or undefined
            assertParamExists('deployDeviceCancel', 'deployId', deployId)
            const localVarPath = `/devices/{device_id}/deploys/{deploy_id}`
                .replace(`{${"device_id"}}`, encodeURIComponent(String(deviceId)))
                .replace(`{${"deploy_id"}}`, encodeURIComponent(String(deployId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Deploy Configurations.
         * @summary GetDeployConfigurations
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDeployConfigurations: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/deployconfigurations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Deploy History.
         * @summary GetDeployHistory
         * @param {string} deviceId Device Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDeployHistory: async (deviceId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'deviceId' is not null or undefined
            assertParamExists('getDeployHistory', 'deviceId', deviceId)
            const localVarPath = `/devices/{device_id}/deploys`
                .replace(`{${"device_id"}}`, encodeURIComponent(String(deviceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DeployApi - functional programming interface
 * @export
 */
export const DeployApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DeployApiAxiosParamCreator(configuration)
    return {
        /**
         * Create Deploy Configuration.
         * @summary CreateDeployConfiguration
         * @param {string} configId Config ID
         * @param {string} [comment] Comment
         * @param {string} [deviceType] Device type
         * @param {string} [sensorLoaderVersionNumber] Sensor loader version number
         * @param {string} [sensorVersionNumber] Sensor version number
         * @param {string} [modelId] Model id
         * @param {string} [modelVersionNumber] Model version number
         * @param {string} [colorMatrixMode] Color matrix mode
         * @param {string} [colorMatrixFileName] Color matrix file name
         * @param {string} [gammaMode] Gamma mode
         * @param {string} [gammaFileName] Gamma file name
         * @param {string} [lscispMode] Lscisp mode
         * @param {string} [lscispFileName] Lscisp file name
         * @param {string} [lscrawMode] Lscraw mode
         * @param {string} [lscrawFileName] Lscraw file name
         * @param {string} [prewbMode] Prewb mode
         * @param {string} [prewbFileName] Prewb file name
         * @param {string} [dewarpMode] Dewarp mode
         * @param {string} [dewarpFileName] Dewarp file name
         * @param {string} [apFwVersionNumber] Ap fw version number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createDeployConfiguration(configId: string, comment?: string, deviceType?: string, sensorLoaderVersionNumber?: string, sensorVersionNumber?: string, modelId?: string, modelVersionNumber?: string, colorMatrixMode?: string, colorMatrixFileName?: string, gammaMode?: string, gammaFileName?: string, lscispMode?: string, lscispFileName?: string, lscrawMode?: string, lscrawFileName?: string, prewbMode?: string, prewbFileName?: string, dewarpMode?: string, dewarpFileName?: string, apFwVersionNumber?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createDeployConfiguration(configId, comment, deviceType, sensorLoaderVersionNumber, sensorVersionNumber, modelId, modelVersionNumber, colorMatrixMode, colorMatrixFileName, gammaMode, gammaFileName, lscispMode, lscispFileName, lscrawMode, lscrawFileName, prewbMode, prewbFileName, dewarpMode, dewarpFileName, apFwVersionNumber, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete Deploy Configuration.
         * @summary DeleteDeployConfiguration
         * @param {string} configId Config ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteDeployConfiguration(configId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteDeployConfiguration(configId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Deploy By Configuration.
         * @summary DeployByConfiguration
         * @param {string} configId Config Id
         * @param {string} deviceIds Device Ids
         * @param {string} [replaceModelId] Replace Model Id
         * @param {string} [comment] Comment
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deployByConfiguration(configId: string, deviceIds: string, replaceModelId?: string, comment?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deployByConfiguration(configId, deviceIds, replaceModelId, comment, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Deploy Device Cancel.
         * @summary DeployDeviceCancel
         * @param {string} deviceId Device Id
         * @param {string} deployId Deploy Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deployDeviceCancel(deviceId: string, deployId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deployDeviceCancel(deviceId, deployId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get Deploy Configurations.
         * @summary GetDeployConfigurations
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDeployConfigurations(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDeployConfigurations(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get Deploy History.
         * @summary GetDeployHistory
         * @param {string} deviceId Device Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDeployHistory(deviceId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDeployHistory(deviceId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DeployApi - factory interface
 * @export
 */
export const DeployApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DeployApiFp(configuration)
    return {
        /**
         * Create Deploy Configuration.
         * @summary CreateDeployConfiguration
         * @param {string} configId Config ID
         * @param {string} [comment] Comment
         * @param {string} [deviceType] Device type
         * @param {string} [sensorLoaderVersionNumber] Sensor loader version number
         * @param {string} [sensorVersionNumber] Sensor version number
         * @param {string} [modelId] Model id
         * @param {string} [modelVersionNumber] Model version number
         * @param {string} [colorMatrixMode] Color matrix mode
         * @param {string} [colorMatrixFileName] Color matrix file name
         * @param {string} [gammaMode] Gamma mode
         * @param {string} [gammaFileName] Gamma file name
         * @param {string} [lscispMode] Lscisp mode
         * @param {string} [lscispFileName] Lscisp file name
         * @param {string} [lscrawMode] Lscraw mode
         * @param {string} [lscrawFileName] Lscraw file name
         * @param {string} [prewbMode] Prewb mode
         * @param {string} [prewbFileName] Prewb file name
         * @param {string} [dewarpMode] Dewarp mode
         * @param {string} [dewarpFileName] Dewarp file name
         * @param {string} [apFwVersionNumber] Ap fw version number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDeployConfiguration(configId: string, comment?: string, deviceType?: string, sensorLoaderVersionNumber?: string, sensorVersionNumber?: string, modelId?: string, modelVersionNumber?: string, colorMatrixMode?: string, colorMatrixFileName?: string, gammaMode?: string, gammaFileName?: string, lscispMode?: string, lscispFileName?: string, lscrawMode?: string, lscrawFileName?: string, prewbMode?: string, prewbFileName?: string, dewarpMode?: string, dewarpFileName?: string, apFwVersionNumber?: string, options?: any): AxiosPromise<any> {
            return localVarFp.createDeployConfiguration(configId, comment, deviceType, sensorLoaderVersionNumber, sensorVersionNumber, modelId, modelVersionNumber, colorMatrixMode, colorMatrixFileName, gammaMode, gammaFileName, lscispMode, lscispFileName, lscrawMode, lscrawFileName, prewbMode, prewbFileName, dewarpMode, dewarpFileName, apFwVersionNumber, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete Deploy Configuration.
         * @summary DeleteDeployConfiguration
         * @param {string} configId Config ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDeployConfiguration(configId: string, options?: any): AxiosPromise<any> {
            return localVarFp.deleteDeployConfiguration(configId, options).then((request) => request(axios, basePath));
        },
        /**
         * Deploy By Configuration.
         * @summary DeployByConfiguration
         * @param {string} configId Config Id
         * @param {string} deviceIds Device Ids
         * @param {string} [replaceModelId] Replace Model Id
         * @param {string} [comment] Comment
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deployByConfiguration(configId: string, deviceIds: string, replaceModelId?: string, comment?: string, options?: any): AxiosPromise<any> {
            return localVarFp.deployByConfiguration(configId, deviceIds, replaceModelId, comment, options).then((request) => request(axios, basePath));
        },
        /**
         * Deploy Device Cancel.
         * @summary DeployDeviceCancel
         * @param {string} deviceId Device Id
         * @param {string} deployId Deploy Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deployDeviceCancel(deviceId: string, deployId: string, options?: any): AxiosPromise<any> {
            return localVarFp.deployDeviceCancel(deviceId, deployId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Deploy Configurations.
         * @summary GetDeployConfigurations
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDeployConfigurations(options?: any): AxiosPromise<any> {
            return localVarFp.getDeployConfigurations(options).then((request) => request(axios, basePath));
        },
        /**
         * Get Deploy History.
         * @summary GetDeployHistory
         * @param {string} deviceId Device Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDeployHistory(deviceId: string, options?: any): AxiosPromise<any> {
            return localVarFp.getDeployHistory(deviceId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DeployApi - object-oriented interface
 * @export
 * @class DeployApi
 * @extends {BaseAPI}
 */
export class DeployApi extends BaseAPI {
    /**
     * Create Deploy Configuration.
     * @summary CreateDeployConfiguration
     * @param {string} configId Config ID
     * @param {string} [comment] Comment
     * @param {string} [deviceType] Device type
     * @param {string} [sensorLoaderVersionNumber] Sensor loader version number
     * @param {string} [sensorVersionNumber] Sensor version number
     * @param {string} [modelId] Model id
     * @param {string} [modelVersionNumber] Model version number
     * @param {string} [colorMatrixMode] Color matrix mode
     * @param {string} [colorMatrixFileName] Color matrix file name
     * @param {string} [gammaMode] Gamma mode
     * @param {string} [gammaFileName] Gamma file name
     * @param {string} [lscispMode] Lscisp mode
     * @param {string} [lscispFileName] Lscisp file name
     * @param {string} [lscrawMode] Lscraw mode
     * @param {string} [lscrawFileName] Lscraw file name
     * @param {string} [prewbMode] Prewb mode
     * @param {string} [prewbFileName] Prewb file name
     * @param {string} [dewarpMode] Dewarp mode
     * @param {string} [dewarpFileName] Dewarp file name
     * @param {string} [apFwVersionNumber] Ap fw version number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeployApi
     */
    public createDeployConfiguration(configId: string, comment?: string, deviceType?: string, sensorLoaderVersionNumber?: string, sensorVersionNumber?: string, modelId?: string, modelVersionNumber?: string, colorMatrixMode?: string, colorMatrixFileName?: string, gammaMode?: string, gammaFileName?: string, lscispMode?: string, lscispFileName?: string, lscrawMode?: string, lscrawFileName?: string, prewbMode?: string, prewbFileName?: string, dewarpMode?: string, dewarpFileName?: string, apFwVersionNumber?: string, options?: AxiosRequestConfig) {
        return DeployApiFp(this.configuration).createDeployConfiguration(configId, comment, deviceType, sensorLoaderVersionNumber, sensorVersionNumber, modelId, modelVersionNumber, colorMatrixMode, colorMatrixFileName, gammaMode, gammaFileName, lscispMode, lscispFileName, lscrawMode, lscrawFileName, prewbMode, prewbFileName, dewarpMode, dewarpFileName, apFwVersionNumber, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete Deploy Configuration.
     * @summary DeleteDeployConfiguration
     * @param {string} configId Config ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeployApi
     */
    public deleteDeployConfiguration(configId: string, options?: AxiosRequestConfig) {
        return DeployApiFp(this.configuration).deleteDeployConfiguration(configId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deploy By Configuration.
     * @summary DeployByConfiguration
     * @param {string} configId Config Id
     * @param {string} deviceIds Device Ids
     * @param {string} [replaceModelId] Replace Model Id
     * @param {string} [comment] Comment
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeployApi
     */
    public deployByConfiguration(configId: string, deviceIds: string, replaceModelId?: string, comment?: string, options?: AxiosRequestConfig) {
        return DeployApiFp(this.configuration).deployByConfiguration(configId, deviceIds, replaceModelId, comment, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deploy Device Cancel.
     * @summary DeployDeviceCancel
     * @param {string} deviceId Device Id
     * @param {string} deployId Deploy Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeployApi
     */
    public deployDeviceCancel(deviceId: string, deployId: string, options?: AxiosRequestConfig) {
        return DeployApiFp(this.configuration).deployDeviceCancel(deviceId, deployId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Deploy Configurations.
     * @summary GetDeployConfigurations
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeployApi
     */
    public getDeployConfigurations(options?: AxiosRequestConfig) {
        return DeployApiFp(this.configuration).getDeployConfigurations(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Deploy History.
     * @summary GetDeployHistory
     * @param {string} deviceId Device Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeployApi
     */
    public getDeployHistory(deviceId: string, options?: AxiosRequestConfig) {
        return DeployApiFp(this.configuration).getDeployHistory(deviceId, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * DeviceAppApi - axios parameter creator
 * @export
 */
export const DeviceAppApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Delete device app.
         * @summary DeleteDeviceApp
         * @param {string} appName App name
         * @param {string} versionNumber App version number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDeviceApp: async (appName: string, versionNumber: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'appName' is not null or undefined
            assertParamExists('deleteDeviceApp', 'appName', appName)
            // verify required parameter 'versionNumber' is not null or undefined
            assertParamExists('deleteDeviceApp', 'versionNumber', versionNumber)
            const localVarPath = `/device_apps/{app_name}/{version_number}`
                .replace(`{${"app_name"}}`, encodeURIComponent(String(appName)))
                .replace(`{${"version_number"}}`, encodeURIComponent(String(versionNumber)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deploy device app.
         * @summary DeployDeviceApp
         * @param {DeployDeviceAppJsonBody} deployDeviceAppJsonBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deployDeviceApp: async (deployDeviceAppJsonBody: DeployDeviceAppJsonBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'deployDeviceAppJsonBody' is not null or undefined
            assertParamExists('deployDeviceApp', 'deployDeviceAppJsonBody', deployDeviceAppJsonBody)
            const localVarPath = `/device_apps_deploys`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deployDeviceAppJsonBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Device App Deploys.
         * @summary GetDeviceAppDeploys
         * @param {string} appName App name
         * @param {string} versionNumber App version number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDeviceAppDeploys: async (appName: string, versionNumber: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'appName' is not null or undefined
            assertParamExists('getDeviceAppDeploys', 'appName', appName)
            // verify required parameter 'versionNumber' is not null or undefined
            assertParamExists('getDeviceAppDeploys', 'versionNumber', versionNumber)
            const localVarPath = `/device_apps/{app_name}/{version_number}/deploys`
                .replace(`{${"app_name"}}`, encodeURIComponent(String(appName)))
                .replace(`{${"version_number"}}`, encodeURIComponent(String(versionNumber)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get device apps.
         * @summary GetDeviceApps
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDeviceApps: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/device_apps`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Import Device app.
         * @summary ImportDeviceApp
         * @param {ImportDeviceAppJsonBody} importDeviceAppJsonBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        importDeviceApp: async (importDeviceAppJsonBody: ImportDeviceAppJsonBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'importDeviceAppJsonBody' is not null or undefined
            assertParamExists('importDeviceApp', 'importDeviceAppJsonBody', importDeviceAppJsonBody)
            const localVarPath = `/device_apps`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(importDeviceAppJsonBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Undeploy device app.
         * @summary UndeployDeviceApp
         * @param {string} deviceIds Device IDs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        undeployDeviceApp: async (deviceIds: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'deviceIds' is not null or undefined
            assertParamExists('undeployDeviceApp', 'deviceIds', deviceIds)
            const localVarPath = `/device_apps_deploys`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (deviceIds !== undefined) {
                localVarQueryParameter['device_ids'] = deviceIds;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DeviceAppApi - functional programming interface
 * @export
 */
export const DeviceAppApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DeviceAppApiAxiosParamCreator(configuration)
    return {
        /**
         * Delete device app.
         * @summary DeleteDeviceApp
         * @param {string} appName App name
         * @param {string} versionNumber App version number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteDeviceApp(appName: string, versionNumber: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteDeviceApp(appName, versionNumber, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Deploy device app.
         * @summary DeployDeviceApp
         * @param {DeployDeviceAppJsonBody} deployDeviceAppJsonBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deployDeviceApp(deployDeviceAppJsonBody: DeployDeviceAppJsonBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deployDeviceApp(deployDeviceAppJsonBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get Device App Deploys.
         * @summary GetDeviceAppDeploys
         * @param {string} appName App name
         * @param {string} versionNumber App version number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDeviceAppDeploys(appName: string, versionNumber: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDeviceAppDeploys(appName, versionNumber, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get device apps.
         * @summary GetDeviceApps
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDeviceApps(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDeviceApps(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Import Device app.
         * @summary ImportDeviceApp
         * @param {ImportDeviceAppJsonBody} importDeviceAppJsonBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async importDeviceApp(importDeviceAppJsonBody: ImportDeviceAppJsonBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.importDeviceApp(importDeviceAppJsonBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Undeploy device app.
         * @summary UndeployDeviceApp
         * @param {string} deviceIds Device IDs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async undeployDeviceApp(deviceIds: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.undeployDeviceApp(deviceIds, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DeviceAppApi - factory interface
 * @export
 */
export const DeviceAppApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DeviceAppApiFp(configuration)
    return {
        /**
         * Delete device app.
         * @summary DeleteDeviceApp
         * @param {string} appName App name
         * @param {string} versionNumber App version number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDeviceApp(appName: string, versionNumber: string, options?: any): AxiosPromise<any> {
            return localVarFp.deleteDeviceApp(appName, versionNumber, options).then((request) => request(axios, basePath));
        },
        /**
         * Deploy device app.
         * @summary DeployDeviceApp
         * @param {DeployDeviceAppJsonBody} deployDeviceAppJsonBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deployDeviceApp(deployDeviceAppJsonBody: DeployDeviceAppJsonBody, options?: any): AxiosPromise<any> {
            return localVarFp.deployDeviceApp(deployDeviceAppJsonBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Device App Deploys.
         * @summary GetDeviceAppDeploys
         * @param {string} appName App name
         * @param {string} versionNumber App version number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDeviceAppDeploys(appName: string, versionNumber: string, options?: any): AxiosPromise<any> {
            return localVarFp.getDeviceAppDeploys(appName, versionNumber, options).then((request) => request(axios, basePath));
        },
        /**
         * Get device apps.
         * @summary GetDeviceApps
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDeviceApps(options?: any): AxiosPromise<any> {
            return localVarFp.getDeviceApps(options).then((request) => request(axios, basePath));
        },
        /**
         * Import Device app.
         * @summary ImportDeviceApp
         * @param {ImportDeviceAppJsonBody} importDeviceAppJsonBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        importDeviceApp(importDeviceAppJsonBody: ImportDeviceAppJsonBody, options?: any): AxiosPromise<any> {
            return localVarFp.importDeviceApp(importDeviceAppJsonBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Undeploy device app.
         * @summary UndeployDeviceApp
         * @param {string} deviceIds Device IDs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        undeployDeviceApp(deviceIds: string, options?: any): AxiosPromise<any> {
            return localVarFp.undeployDeviceApp(deviceIds, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DeviceAppApi - object-oriented interface
 * @export
 * @class DeviceAppApi
 * @extends {BaseAPI}
 */
export class DeviceAppApi extends BaseAPI {
    /**
     * Delete device app.
     * @summary DeleteDeviceApp
     * @param {string} appName App name
     * @param {string} versionNumber App version number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceAppApi
     */
    public deleteDeviceApp(appName: string, versionNumber: string, options?: AxiosRequestConfig) {
        return DeviceAppApiFp(this.configuration).deleteDeviceApp(appName, versionNumber, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deploy device app.
     * @summary DeployDeviceApp
     * @param {DeployDeviceAppJsonBody} deployDeviceAppJsonBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceAppApi
     */
    public deployDeviceApp(deployDeviceAppJsonBody: DeployDeviceAppJsonBody, options?: AxiosRequestConfig) {
        return DeviceAppApiFp(this.configuration).deployDeviceApp(deployDeviceAppJsonBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Device App Deploys.
     * @summary GetDeviceAppDeploys
     * @param {string} appName App name
     * @param {string} versionNumber App version number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceAppApi
     */
    public getDeviceAppDeploys(appName: string, versionNumber: string, options?: AxiosRequestConfig) {
        return DeviceAppApiFp(this.configuration).getDeviceAppDeploys(appName, versionNumber, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get device apps.
     * @summary GetDeviceApps
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceAppApi
     */
    public getDeviceApps(options?: AxiosRequestConfig) {
        return DeviceAppApiFp(this.configuration).getDeviceApps(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Import Device app.
     * @summary ImportDeviceApp
     * @param {ImportDeviceAppJsonBody} importDeviceAppJsonBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceAppApi
     */
    public importDeviceApp(importDeviceAppJsonBody: ImportDeviceAppJsonBody, options?: AxiosRequestConfig) {
        return DeviceAppApiFp(this.configuration).importDeviceApp(importDeviceAppJsonBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Undeploy device app.
     * @summary UndeployDeviceApp
     * @param {string} deviceIds Device IDs
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceAppApi
     */
    public undeployDeviceApp(deviceIds: string, options?: AxiosRequestConfig) {
        return DeviceAppApiFp(this.configuration).undeployDeviceApp(deviceIds, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * DeviceCommandApi - axios parameter creator
 * @export
 */
export const DeviceCommandApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Start Upload Inference Result.
         * @summary StartUploadInferenceResult
         * @param {string} deviceId Device Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        startUploadInferenceResult: async (deviceId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'deviceId' is not null or undefined
            assertParamExists('startUploadInferenceResult', 'deviceId', deviceId)
            const localVarPath = `/devices/{device_id}/inferenceresults/collectstart`
                .replace(`{${"device_id"}}`, encodeURIComponent(String(deviceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


            // authentication accessToken required

            // http bearer authentication required

            await setBearerAuthToObject(localVarHeaderParameter, configuration) // Added by SARD Team
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Stop Upload Inference Result.
         * @summary StopUploadInferenceResult
         * @param {string} deviceId Device Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stopUploadInferenceResult: async (deviceId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'deviceId' is not null or undefined
            assertParamExists('stopUploadInferenceResult', 'deviceId', deviceId)
            const localVarPath = `/devices/{device_id}/inferenceresults/collectstop`
                .replace(`{${"device_id"}}`, encodeURIComponent(String(deviceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


            // authentication accessToken required

            // http bearer authentication required

            await setBearerAuthToObject(localVarHeaderParameter, configuration) // Added by SARD Team
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DeviceCommandApi - functional programming interface
 * @export
 */
export const DeviceCommandApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DeviceCommandApiAxiosParamCreator(configuration)
    return {
        /**
         * Start Upload Inference Result.
         * @summary StartUploadInferenceResult
         * @param {string} deviceId Device Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async startUploadInferenceResult(deviceId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StartUploadInferenceResult200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.startUploadInferenceResult(deviceId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Stop Upload Inference Result.
         * @summary StopUploadInferenceResult
         * @param {string} deviceId Device Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async stopUploadInferenceResult(deviceId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.stopUploadInferenceResult(deviceId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DeviceCommandApi - factory interface
 * @export
 */
export const DeviceCommandApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DeviceCommandApiFp(configuration)
    return {
        /**
         * Start Upload Inference Result.
         * @summary StartUploadInferenceResult
         * @param {string} deviceId Device Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        startUploadInferenceResult(deviceId: string, options?: any): AxiosPromise<StartUploadInferenceResult200Response> {
            return localVarFp.startUploadInferenceResult(deviceId, options).then((request) => request(axios, basePath));
        },
        /**
         * Stop Upload Inference Result.
         * @summary StopUploadInferenceResult
         * @param {string} deviceId Device Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stopUploadInferenceResult(deviceId: string, options?: any): AxiosPromise<SuccessResponse> {
            return localVarFp.stopUploadInferenceResult(deviceId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DeviceCommandApi - object-oriented interface
 * @export
 * @class DeviceCommandApi
 * @extends {BaseAPI}
 */
export class DeviceCommandApi extends BaseAPI {
    /**
     * Start Upload Inference Result.
     * @summary StartUploadInferenceResult
     * @param {string} deviceId Device Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceCommandApi
     */
    public startUploadInferenceResult(deviceId: string, options?: AxiosRequestConfig) {
        return DeviceCommandApiFp(this.configuration).startUploadInferenceResult(deviceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Stop Upload Inference Result.
     * @summary StopUploadInferenceResult
     * @param {string} deviceId Device Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceCommandApi
     */
    public stopUploadInferenceResult(deviceId: string, options?: AxiosRequestConfig) {
        return DeviceCommandApiFp(this.configuration).stopUploadInferenceResult(deviceId, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * InsightApi - axios parameter creator
 * @export
 */
export const InsightApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Export Images.
         * @summary ExportImages
         * @param {string} key Key
         * @param {string} [fromDatetime] From Datetime
         * @param {string} [toDatetime] To Datetime
         * @param {string} [deviceId] Device Id
         * @param {string} [fileFormat] File Format
         * @param {string} [redcowinraincipher] Redcowinraincipher
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exportImages: async (key: string, fromDatetime?: string, toDatetime?: string, deviceId?: string, fileFormat?: string, redcowinraincipher?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'key' is not null or undefined
            assertParamExists('exportImages', 'key', key)
            const localVarPath = `/devices/images/export`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (key !== undefined) {
                localVarQueryParameter['key'] = key;
            }

            if (fromDatetime !== undefined) {
                localVarQueryParameter['from_datetime'] = fromDatetime;
            }

            if (toDatetime !== undefined) {
                localVarQueryParameter['to_datetime'] = toDatetime;
            }

            if (deviceId !== undefined) {
                localVarQueryParameter['device_id'] = deviceId;
            }

            if (fileFormat !== undefined) {
                localVarQueryParameter['file_format'] = fileFormat;
            }

            if (redcowinraincipher !== undefined) {
                localVarQueryParameter['redcowinraincipher'] = redcowinraincipher;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Image Directories.
         * @summary GetImageDirectories
         * @param {string} [deviceId] Device Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getImageDirectories: async (deviceId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/devices/images/directories`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (deviceId !== undefined) {
                localVarQueryParameter['device_id'] = deviceId;
            }

            // authentication accessToken required

            // http bearer authentication required

            await setBearerAuthToObject(localVarHeaderParameter, configuration) // Added by SARD Team
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Images.
         * @summary GetImages
         * @param {string} deviceId Device Id
         * @param {string} subDirectoryName Sub Directory Name
         * @param {string} [orderBy] Order By (DESC or ASC)
         * @param {number} [numberOfImages] Number Of Images (0～256)
         * @param {number} [skip] Skip
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getImages: async (deviceId: string, subDirectoryName: string, orderBy?: string, numberOfImages?: number, skip?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'deviceId' is not null or undefined
            assertParamExists('getImages', 'deviceId', deviceId)
            // verify required parameter 'subDirectoryName' is not null or undefined
            assertParamExists('getImages', 'subDirectoryName', subDirectoryName)
            const localVarPath = `/devices/{device_id}/images/directories/{sub_directory_name}`
                .replace(`{${"device_id"}}`, encodeURIComponent(String(deviceId)))
                .replace(`{${"sub_directory_name"}}`, encodeURIComponent(String(subDirectoryName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (numberOfImages !== undefined) {
                localVarQueryParameter['number_of_images'] = numberOfImages;
            }

            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }

            // authentication accessToken required

            // http bearer authentication required

            await setBearerAuthToObject(localVarHeaderParameter, configuration) // Added by SARD Team
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Inference Results.
         * @summary GetInferenceResults
         * @param {string} deviceId Device Id
         * @param {number} [numberOfInferenceresults] NumberOfInferenceresults
         * @param {string} [filter] Filter
         * @param {number} [raw] Raw (0 or 1)
         * @param {string} [time] Time
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInferenceResults: async (deviceId: string, numberOfInferenceresults?: number, filter?: string, raw?: number, time?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'deviceId' is not null or undefined
            assertParamExists('getInferenceResults', 'deviceId', deviceId)
            const localVarPath = `/devices/{device_id}/inferenceresults`
                .replace(`{${"device_id"}}`, encodeURIComponent(String(deviceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (numberOfInferenceresults !== undefined) {
                localVarQueryParameter['NumberOfInferenceresults'] = numberOfInferenceresults;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (raw !== undefined) {
                localVarQueryParameter['raw'] = raw;
            }

            if (time !== undefined) {
                localVarQueryParameter['time'] = time;
            }

            // authentication accessToken required
            // http bearer authentication required

            await setBearerAuthToObject(localVarHeaderParameter, configuration) // Added by SARD Team
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * InsightApi - functional programming interface
 * @export
 */
export const InsightApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = InsightApiAxiosParamCreator(configuration)
    return {
        /**
         * Export Images.
         * @summary ExportImages
         * @param {string} key Key
         * @param {string} [fromDatetime] From Datetime
         * @param {string} [toDatetime] To Datetime
         * @param {string} [deviceId] Device Id
         * @param {string} [fileFormat] File Format
         * @param {string} [redcowinraincipher] Redcowinraincipher
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async exportImages(key: string, fromDatetime?: string, toDatetime?: string, deviceId?: string, fileFormat?: string, redcowinraincipher?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.exportImages(key, fromDatetime, toDatetime, deviceId, fileFormat, redcowinraincipher, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get Image Directories.
         * @summary GetImageDirectories
         * @param {string} [deviceId] Device Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getImageDirectories(deviceId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetImageDirectories200ResponseInner>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getImageDirectories(deviceId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get Images.
         * @summary GetImages
         * @param {string} deviceId Device Id
         * @param {string} subDirectoryName Sub Directory Name
         * @param {string} [orderBy] Order By (DESC or ASC)
         * @param {number} [numberOfImages] Number Of Images (0～256)
         * @param {number} [skip] Skip
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getImages(deviceId: string, subDirectoryName: string, orderBy?: string, numberOfImages?: number, skip?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetImages200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getImages(deviceId, subDirectoryName, orderBy, numberOfImages, skip, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get Inference Results.
         * @summary GetInferenceResults
         * @param {string} deviceId Device Id
         * @param {number} [numberOfInferenceresults] NumberOfInferenceresults
         * @param {string} [filter] Filter
         * @param {number} [raw] Raw (0 or 1)
         * @param {string} [time] Time
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getInferenceResults(deviceId: string, numberOfInferenceresults?: number, filter?: string, raw?: number, time?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetInferenceResults200ResponseInner>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getInferenceResults(deviceId, numberOfInferenceresults, filter, raw, time, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * InsightApi - factory interface
 * @export
 */
export const InsightApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = InsightApiFp(configuration)
    return {
        /**
         * Export Images.
         * @summary ExportImages
         * @param {string} key Key
         * @param {string} [fromDatetime] From Datetime
         * @param {string} [toDatetime] To Datetime
         * @param {string} [deviceId] Device Id
         * @param {string} [fileFormat] File Format
         * @param {string} [redcowinraincipher] Redcowinraincipher
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exportImages(key: string, fromDatetime?: string, toDatetime?: string, deviceId?: string, fileFormat?: string, redcowinraincipher?: string, options?: any): AxiosPromise<any> {
            return localVarFp.exportImages(key, fromDatetime, toDatetime, deviceId, fileFormat, redcowinraincipher, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Image Directories.
         * @summary GetImageDirectories
         * @param {string} [deviceId] Device Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getImageDirectories(deviceId?: string, options?: any): AxiosPromise<Array<GetImageDirectories200ResponseInner>> {
            return localVarFp.getImageDirectories(deviceId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Images.
         * @summary GetImages
         * @param {string} deviceId Device Id
         * @param {string} subDirectoryName Sub Directory Name
         * @param {string} [orderBy] Order By (DESC or ASC)
         * @param {number} [numberOfImages] Number Of Images (0～256)
         * @param {number} [skip] Skip
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getImages(deviceId: string, subDirectoryName: string, orderBy?: string, numberOfImages?: number, skip?: number, options?: any): AxiosPromise<GetImages200Response> {
            return localVarFp.getImages(deviceId, subDirectoryName, orderBy, numberOfImages, skip, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Inference Results.
         * @summary GetInferenceResults
         * @param {string} deviceId Device Id
         * @param {number} [numberOfInferenceresults] NumberOfInferenceresults
         * @param {string} [filter] Filter
         * @param {number} [raw] Raw (0 or 1)
         * @param {string} [time] Time
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInferenceResults(deviceId: string, numberOfInferenceresults?: number, filter?: string, raw?: number, time?: string, options?: any): AxiosPromise<Array<GetInferenceResults200ResponseInner>> {
            return localVarFp.getInferenceResults(deviceId, numberOfInferenceresults, filter, raw, time, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * InsightApi - object-oriented interface
 * @export
 * @class InsightApi
 * @extends {BaseAPI}
 */
export class InsightApi extends BaseAPI {
    /**
     * Export Images.
     * @summary ExportImages
     * @param {string} key Key
     * @param {string} [fromDatetime] From Datetime
     * @param {string} [toDatetime] To Datetime
     * @param {string} [deviceId] Device Id
     * @param {string} [fileFormat] File Format
     * @param {string} [redcowinraincipher] Redcowinraincipher
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InsightApi
     */
    public exportImages(key: string, fromDatetime?: string, toDatetime?: string, deviceId?: string, fileFormat?: string, redcowinraincipher?: string, options?: AxiosRequestConfig) {
        return InsightApiFp(this.configuration).exportImages(key, fromDatetime, toDatetime, deviceId, fileFormat, redcowinraincipher, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Image Directories.
     * @summary GetImageDirectories
     * @param {string} [deviceId] Device Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InsightApi
     */
    public getImageDirectories(deviceId?: string, options?: AxiosRequestConfig) {
        return InsightApiFp(this.configuration).getImageDirectories(deviceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Images.
     * @summary GetImages
     * @param {string} deviceId Device Id
     * @param {string} subDirectoryName Sub Directory Name
     * @param {string} [orderBy] Order By (DESC or ASC)
     * @param {number} [numberOfImages] Number Of Images (0～256)
     * @param {number} [skip] Skip
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InsightApi
     */
    public getImages(deviceId: string, subDirectoryName: string, orderBy?: string, numberOfImages?: number, skip?: number, options?: AxiosRequestConfig) {
        return InsightApiFp(this.configuration).getImages(deviceId, subDirectoryName, orderBy, numberOfImages, skip, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Inference Results.
     * @summary GetInferenceResults
     * @param {string} deviceId Device Id
     * @param {number} [numberOfInferenceresults] NumberOfInferenceresults
     * @param {string} [filter] Filter
     * @param {number} [raw] Raw (0 or 1)
     * @param {string} [time] Time
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InsightApi
     */
    public getInferenceResults(deviceId: string, numberOfInferenceresults?: number, filter?: string, raw?: number, time?: string, options?: AxiosRequestConfig) {
        return InsightApiFp(this.configuration).getInferenceResults(deviceId, numberOfInferenceresults, filter, raw, time, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ManageDevicesApi - axios parameter creator
 * @export
 */
export const ManageDevicesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get Devices
         * @summary GetDevices
         * @param {string} [connectionState] connectionState (Connected or Disconnected)
         * @param {string} [deviceName] device_name
         * @param {string} [deviceId] device_id
         * @param {string} [deviceGroupId] device_group_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDevices: async (connectionState?: string, deviceName?: string, deviceId?: string, deviceGroupId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/devices`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (connectionState !== undefined) {
                localVarQueryParameter['connectionState'] = connectionState;
            }

            if (deviceName !== undefined) {
                localVarQueryParameter['device_name'] = deviceName;
            }

            if (deviceId !== undefined) {
                localVarQueryParameter['device_id'] = deviceId;
            }

            if (deviceGroupId !== undefined) {
                localVarQueryParameter['device_group_id'] = deviceGroupId;
            }

            // authentication accessToken required

            // http bearer authentication required

            await setBearerAuthToObject(localVarHeaderParameter, configuration) // Added by SARD Team
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ManageDevicesApi - functional programming interface
 * @export
 */
export const ManageDevicesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ManageDevicesApiAxiosParamCreator(configuration)
    return {
        /**
         * Get Devices
         * @summary GetDevices
         * @param {string} [connectionState] connectionState (Connected or Disconnected)
         * @param {string} [deviceName] device_name
         * @param {string} [deviceId] device_id
         * @param {string} [deviceGroupId] device_group_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDevices(connectionState?: string, deviceName?: string, deviceId?: string, deviceGroupId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetDevices200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDevices(connectionState, deviceName, deviceId, deviceGroupId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ManageDevicesApi - factory interface
 * @export
 */
export const ManageDevicesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ManageDevicesApiFp(configuration)
    return {
        /**
         * Get Devices
         * @summary GetDevices
         * @param {string} [connectionState] connectionState (Connected or Disconnected)
         * @param {string} [deviceName] device_name
         * @param {string} [deviceId] device_id
         * @param {string} [deviceGroupId] device_group_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDevices(connectionState?: string, deviceName?: string, deviceId?: string, deviceGroupId?: string, options?: any): AxiosPromise<GetDevices200Response> {
            return localVarFp.getDevices(connectionState, deviceName, deviceId, deviceGroupId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ManageDevicesApi - object-oriented interface
 * @export
 * @class ManageDevicesApi
 * @extends {BaseAPI}
 */
export class ManageDevicesApi extends BaseAPI {
    /**
     * Get Devices
     * @summary GetDevices
     * @param {string} [connectionState] connectionState (Connected or Disconnected)
     * @param {string} [deviceName] device_name
     * @param {string} [deviceId] device_id
     * @param {string} [deviceGroupId] device_group_id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManageDevicesApi
     */
    public getDevices(connectionState?: string, deviceName?: string, deviceId?: string, deviceGroupId?: string, options?: AxiosRequestConfig) {
        return ManageDevicesApiFp(this.configuration).getDevices(connectionState, deviceName, deviceId, deviceGroupId, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * TrainModelApi - axios parameter creator
 * @export
 */
export const TrainModelApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Delete model function.  Parameters: ---------- request(Request): Request from fastapi. session(Any): The result of calling Depends(get_db).  Returns: ------- ret(object): The result of calling main method of delete_model api.
         * @summary DeleteModelFunc
         * @param {string} modelId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteModelFunc: async (modelId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'modelId' is not null or undefined
            assertParamExists('deleteModelFunc', 'modelId', modelId)
            const localVarPath = `/models/{model_id}`
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get model of base function.  Parameters: ---------- request(Request): Request from fastapi. session(Any): The result of calling Depends(get_db).  Returns: ------- ret(object): The result of calling main method of get_base_model_status api.
         * @summary GetBaseModelStatusFunc
         * @param {string} modelId 
         * @param {string} [latestType] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBaseModelStatusFunc: async (modelId: string, latestType?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'modelId' is not null or undefined
            assertParamExists('getBaseModelStatusFunc', 'modelId', modelId)
            const localVarPath = `/models/{model_id}/base`
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (latestType !== undefined) {
                localVarQueryParameter['latest_type'] = latestType;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get model of base function.  Parameters: ---------- request(Request): Request from fastapi. session(Any): The result of calling Depends(get_db).  Returns: ------- ret(object): The result of calling main method of get_models api.
         * @summary GetModelsFunc
         * @param {string} [modelId] 
         * @param {string} [comment] 
         * @param {string} [projectName] 
         * @param {string} [modelPlatform] 
         * @param {string} [projectType] 
         * @param {string} [deviceId] 
         * @param {string} [latestType] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getModelsFunc: async (modelId?: string, comment?: string, projectName?: string, modelPlatform?: string, projectType?: string, deviceId?: string, latestType?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/models`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (modelId !== undefined) {
                localVarQueryParameter['model_id'] = modelId;
            }

            if (comment !== undefined) {
                localVarQueryParameter['comment'] = comment;
            }

            if (projectName !== undefined) {
                localVarQueryParameter['project_name'] = projectName;
            }

            if (modelPlatform !== undefined) {
                localVarQueryParameter['model_platform'] = modelPlatform;
            }

            if (projectType !== undefined) {
                localVarQueryParameter['project_type'] = projectType;
            }

            if (deviceId !== undefined) {
                localVarQueryParameter['device_id'] = deviceId;
            }

            if (latestType !== undefined) {
                localVarQueryParameter['latest_type'] = latestType;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * import_base_model function.  Parameters: ---------- request(Request): Request from fastapi. session(Any): The result of calling Depends(get_db).  Returns: ------- ret(object): The result of calling main method of import_base_model api.
         * @summary ImportBaseModelFunc
         * @param {TrainModelImportBaseModelDataImportbasemodelindtoJsonBody} trainModelImportBaseModelDataImportbasemodelindtoJsonBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        importBaseModelFunc: async (trainModelImportBaseModelDataImportbasemodelindtoJsonBody: TrainModelImportBaseModelDataImportbasemodelindtoJsonBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'trainModelImportBaseModelDataImportbasemodelindtoJsonBody' is not null or undefined
            assertParamExists('importBaseModelFunc', 'trainModelImportBaseModelDataImportbasemodelindtoJsonBody', trainModelImportBaseModelDataImportbasemodelindtoJsonBody)
            const localVarPath = `/models`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(trainModelImportBaseModelDataImportbasemodelindtoJsonBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Import NonConvert Model function.  Parameters: ---------- request(Request): Request from fastapi. session(Any): The result of calling Depends(get_db).  Returns: ------- ret(object): The result of calling main method of convert_model api.
         * @summary ImportNonConvertedModelFunc
         * @param {string} modelId 
         * @param {string} [deviceId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        importNonConvertedModelFunc: async (modelId: string, deviceId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'modelId' is not null or undefined
            assertParamExists('importNonConvertedModelFunc', 'modelId', modelId)
            const localVarPath = `/models/{model_id}`
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (deviceId !== undefined) {
                localVarQueryParameter['device_id'] = deviceId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TrainModelApi - functional programming interface
 * @export
 */
export const TrainModelApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TrainModelApiAxiosParamCreator(configuration)
    return {
        /**
         * Delete model function.  Parameters: ---------- request(Request): Request from fastapi. session(Any): The result of calling Depends(get_db).  Returns: ------- ret(object): The result of calling main method of delete_model api.
         * @summary DeleteModelFunc
         * @param {string} modelId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteModelFunc(modelId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteModelFunc(modelId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get model of base function.  Parameters: ---------- request(Request): Request from fastapi. session(Any): The result of calling Depends(get_db).  Returns: ------- ret(object): The result of calling main method of get_base_model_status api.
         * @summary GetBaseModelStatusFunc
         * @param {string} modelId 
         * @param {string} [latestType] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBaseModelStatusFunc(modelId: string, latestType?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBaseModelStatusFunc(modelId, latestType, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get model of base function.  Parameters: ---------- request(Request): Request from fastapi. session(Any): The result of calling Depends(get_db).  Returns: ------- ret(object): The result of calling main method of get_models api.
         * @summary GetModelsFunc
         * @param {string} [modelId] 
         * @param {string} [comment] 
         * @param {string} [projectName] 
         * @param {string} [modelPlatform] 
         * @param {string} [projectType] 
         * @param {string} [deviceId] 
         * @param {string} [latestType] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getModelsFunc(modelId?: string, comment?: string, projectName?: string, modelPlatform?: string, projectType?: string, deviceId?: string, latestType?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getModelsFunc(modelId, comment, projectName, modelPlatform, projectType, deviceId, latestType, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * import_base_model function.  Parameters: ---------- request(Request): Request from fastapi. session(Any): The result of calling Depends(get_db).  Returns: ------- ret(object): The result of calling main method of import_base_model api.
         * @summary ImportBaseModelFunc
         * @param {TrainModelImportBaseModelDataImportbasemodelindtoJsonBody} trainModelImportBaseModelDataImportbasemodelindtoJsonBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async importBaseModelFunc(trainModelImportBaseModelDataImportbasemodelindtoJsonBody: TrainModelImportBaseModelDataImportbasemodelindtoJsonBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.importBaseModelFunc(trainModelImportBaseModelDataImportbasemodelindtoJsonBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Import NonConvert Model function.  Parameters: ---------- request(Request): Request from fastapi. session(Any): The result of calling Depends(get_db).  Returns: ------- ret(object): The result of calling main method of convert_model api.
         * @summary ImportNonConvertedModelFunc
         * @param {string} modelId 
         * @param {string} [deviceId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async importNonConvertedModelFunc(modelId: string, deviceId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.importNonConvertedModelFunc(modelId, deviceId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TrainModelApi - factory interface
 * @export
 */
export const TrainModelApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TrainModelApiFp(configuration)
    return {
        /**
         * Delete model function.  Parameters: ---------- request(Request): Request from fastapi. session(Any): The result of calling Depends(get_db).  Returns: ------- ret(object): The result of calling main method of delete_model api.
         * @summary DeleteModelFunc
         * @param {string} modelId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteModelFunc(modelId: string, options?: any): AxiosPromise<any> {
            return localVarFp.deleteModelFunc(modelId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get model of base function.  Parameters: ---------- request(Request): Request from fastapi. session(Any): The result of calling Depends(get_db).  Returns: ------- ret(object): The result of calling main method of get_base_model_status api.
         * @summary GetBaseModelStatusFunc
         * @param {string} modelId 
         * @param {string} [latestType] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBaseModelStatusFunc(modelId: string, latestType?: string, options?: any): AxiosPromise<any> {
            return localVarFp.getBaseModelStatusFunc(modelId, latestType, options).then((request) => request(axios, basePath));
        },
        /**
         * Get model of base function.  Parameters: ---------- request(Request): Request from fastapi. session(Any): The result of calling Depends(get_db).  Returns: ------- ret(object): The result of calling main method of get_models api.
         * @summary GetModelsFunc
         * @param {string} [modelId] 
         * @param {string} [comment] 
         * @param {string} [projectName] 
         * @param {string} [modelPlatform] 
         * @param {string} [projectType] 
         * @param {string} [deviceId] 
         * @param {string} [latestType] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getModelsFunc(modelId?: string, comment?: string, projectName?: string, modelPlatform?: string, projectType?: string, deviceId?: string, latestType?: string, options?: any): AxiosPromise<any> {
            return localVarFp.getModelsFunc(modelId, comment, projectName, modelPlatform, projectType, deviceId, latestType, options).then((request) => request(axios, basePath));
        },
        /**
         * import_base_model function.  Parameters: ---------- request(Request): Request from fastapi. session(Any): The result of calling Depends(get_db).  Returns: ------- ret(object): The result of calling main method of import_base_model api.
         * @summary ImportBaseModelFunc
         * @param {TrainModelImportBaseModelDataImportbasemodelindtoJsonBody} trainModelImportBaseModelDataImportbasemodelindtoJsonBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        importBaseModelFunc(trainModelImportBaseModelDataImportbasemodelindtoJsonBody: TrainModelImportBaseModelDataImportbasemodelindtoJsonBody, options?: any): AxiosPromise<any> {
            return localVarFp.importBaseModelFunc(trainModelImportBaseModelDataImportbasemodelindtoJsonBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Import NonConvert Model function.  Parameters: ---------- request(Request): Request from fastapi. session(Any): The result of calling Depends(get_db).  Returns: ------- ret(object): The result of calling main method of convert_model api.
         * @summary ImportNonConvertedModelFunc
         * @param {string} modelId 
         * @param {string} [deviceId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        importNonConvertedModelFunc(modelId: string, deviceId?: string, options?: any): AxiosPromise<any> {
            return localVarFp.importNonConvertedModelFunc(modelId, deviceId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TrainModelApi - object-oriented interface
 * @export
 * @class TrainModelApi
 * @extends {BaseAPI}
 */
export class TrainModelApi extends BaseAPI {
    /**
     * Delete model function.  Parameters: ---------- request(Request): Request from fastapi. session(Any): The result of calling Depends(get_db).  Returns: ------- ret(object): The result of calling main method of delete_model api.
     * @summary DeleteModelFunc
     * @param {string} modelId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TrainModelApi
     */
    public deleteModelFunc(modelId: string, options?: AxiosRequestConfig) {
        return TrainModelApiFp(this.configuration).deleteModelFunc(modelId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get model of base function.  Parameters: ---------- request(Request): Request from fastapi. session(Any): The result of calling Depends(get_db).  Returns: ------- ret(object): The result of calling main method of get_base_model_status api.
     * @summary GetBaseModelStatusFunc
     * @param {string} modelId 
     * @param {string} [latestType] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TrainModelApi
     */
    public getBaseModelStatusFunc(modelId: string, latestType?: string, options?: AxiosRequestConfig) {
        return TrainModelApiFp(this.configuration).getBaseModelStatusFunc(modelId, latestType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get model of base function.  Parameters: ---------- request(Request): Request from fastapi. session(Any): The result of calling Depends(get_db).  Returns: ------- ret(object): The result of calling main method of get_models api.
     * @summary GetModelsFunc
     * @param {string} [modelId] 
     * @param {string} [comment] 
     * @param {string} [projectName] 
     * @param {string} [modelPlatform] 
     * @param {string} [projectType] 
     * @param {string} [deviceId] 
     * @param {string} [latestType] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TrainModelApi
     */
    public getModelsFunc(modelId?: string, comment?: string, projectName?: string, modelPlatform?: string, projectType?: string, deviceId?: string, latestType?: string, options?: AxiosRequestConfig) {
        return TrainModelApiFp(this.configuration).getModelsFunc(modelId, comment, projectName, modelPlatform, projectType, deviceId, latestType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * import_base_model function.  Parameters: ---------- request(Request): Request from fastapi. session(Any): The result of calling Depends(get_db).  Returns: ------- ret(object): The result of calling main method of import_base_model api.
     * @summary ImportBaseModelFunc
     * @param {TrainModelImportBaseModelDataImportbasemodelindtoJsonBody} trainModelImportBaseModelDataImportbasemodelindtoJsonBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TrainModelApi
     */
    public importBaseModelFunc(trainModelImportBaseModelDataImportbasemodelindtoJsonBody: TrainModelImportBaseModelDataImportbasemodelindtoJsonBody, options?: AxiosRequestConfig) {
        return TrainModelApiFp(this.configuration).importBaseModelFunc(trainModelImportBaseModelDataImportbasemodelindtoJsonBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Import NonConvert Model function.  Parameters: ---------- request(Request): Request from fastapi. session(Any): The result of calling Depends(get_db).  Returns: ------- ret(object): The result of calling main method of convert_model api.
     * @summary ImportNonConvertedModelFunc
     * @param {string} modelId 
     * @param {string} [deviceId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TrainModelApi
     */
    public importNonConvertedModelFunc(modelId: string, deviceId?: string, options?: AxiosRequestConfig) {
        return TrainModelApiFp(this.configuration).importNonConvertedModelFunc(modelId, deviceId, options).then((request) => request(this.axios, this.basePath));
    }
}


