/* tslint:disable */
/* eslint-disable */
/**
 * AITRIOS | Console
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * ApplyCommandParameterFileToDevice Json Body
 * @export
 * @interface ApplyCommandParameterFileToDeviceJsonBody
 */
export interface ApplyCommandParameterFileToDeviceJsonBody {
    /**
     * Specify multiple device IDs separated by commas.
     * @type {string}
     * @memberof ApplyCommandParameterFileToDeviceJsonBody
     */
    'device_ids': string;
}
/**
 * ApplyParameterCameraFileToDevice Json Body
 * @export
 * @interface ApplyParameterCameraFileToDeviceJsonBody
 */
export interface ApplyParameterCameraFileToDeviceJsonBody {
    /**
     * Device Ids
     * @type {string}
     * @memberof ApplyParameterCameraFileToDeviceJsonBody
     */
    'device_ids': string;
}
/**
 * CancelCommandParameterFile Json Body
 * @export
 * @interface CancelCommandParameterFileJsonBody
 */
export interface CancelCommandParameterFileJsonBody {
    /**
     * Specify multiple device IDs separated by commas.
     * @type {string}
     * @memberof CancelCommandParameterFileJsonBody
     */
    'device_ids': string;
}
/**
 * CancelParameterCameraFile Json Body
 * @export
 * @interface CancelParameterCameraFileJsonBody
 */
export interface CancelParameterCameraFileJsonBody {
    /**
     * Device Ids
     * @type {string}
     * @memberof CancelParameterCameraFileJsonBody
     */
    'device_ids': string;
}
/**
 * ChangePassword API json_body
 * @export
 * @interface ChangePasswordJsonBody
 */
export interface ChangePasswordJsonBody {
    /**
     * Pass
     * @type {string}
     * @memberof ChangePasswordJsonBody
     */
    'password': string;
}
/**
 * CreateCameraCustomSetupFile Json Body
 * @export
 * @interface CreateCameraCustomSetupFileJsonBody
 */
export interface CreateCameraCustomSetupFileJsonBody {
    /**
     * Type
     * @type {string}
     * @memberof CreateCameraCustomSetupFileJsonBody
     */
    'type'?: string;
    /**
     * FileName
     * @type {string}
     * @memberof CreateCameraCustomSetupFileJsonBody
     */
    'file_name': string;
    /**
     * Contents
     * @type {string}
     * @memberof CreateCameraCustomSetupFileJsonBody
     */
    'contents': string;
    /**
     * Comment
     * @type {string}
     * @memberof CreateCameraCustomSetupFileJsonBody
     */
    'comment'?: string;
}
/**
 * CreateFirmware API model
 * @export
 * @interface CreateFirmwareJsonBody
 */
export interface CreateFirmwareJsonBody {
    /**
     * Firmware Type
     * @type {string}
     * @memberof CreateFirmwareJsonBody
     */
    'firmware_type'?: string;
    /**
     * Version Number
     * @type {string}
     * @memberof CreateFirmwareJsonBody
     */
    'version_number'?: string;
    /**
     * Comment
     * @type {string}
     * @memberof CreateFirmwareJsonBody
     */
    'comment'?: string;
    /**
     * FileName
     * @type {string}
     * @memberof CreateFirmwareJsonBody
     */
    'file_name'?: string;
    /**
     * File Content
     * @type {string}
     * @memberof CreateFirmwareJsonBody
     */
    'file_content'?: string;
}
/**
 * 
 * @export
 * @interface DeployConfiguration
 */
export interface DeployConfiguration {
    /**
     * todo
     * @type {string}
     * @memberof DeployConfiguration
     */
    'config_id': string;
    /**
     * todo
     * @type {string}
     * @memberof DeployConfiguration
     */
    'device_type': string;
    /**
     * todo
     * @type {string}
     * @memberof DeployConfiguration
     */
    'config_comment': string;
    /**
     * todo
     * @type {number}
     * @memberof DeployConfiguration
     */
    'running_cnt': number;
    /**
     * todo
     * @type {number}
     * @memberof DeployConfiguration
     */
    'success_cnt': number;
    /**
     * todo
     * @type {number}
     * @memberof DeployConfiguration
     */
    'fail_cnt': number;
    /**
     * 
     * @type {DeployConfigurationFirmware}
     * @memberof DeployConfiguration
     */
    'firmware': DeployConfigurationFirmware;
    /**
     * 
     * @type {DeployConfigurationModel}
     * @memberof DeployConfiguration
     */
    'model': DeployConfigurationModel;
    /**
     * 
     * @type {DeployConfigurationCustomSetting}
     * @memberof DeployConfiguration
     */
    'custom_setting': DeployConfigurationCustomSetting;
    /**
     * todo
     * @type {string}
     * @memberof DeployConfiguration
     */
    'ins_id': string;
    /**
     * todo
     * @type {string}
     * @memberof DeployConfiguration
     */
    'ins_date': string;
    /**
     * todo
     * @type {string}
     * @memberof DeployConfiguration
     */
    'upd_id': string;
    /**
     * todo
     * @type {string}
     * @memberof DeployConfiguration
     */
    'upd_date': string;
}
/**
 * 
 * @export
 * @interface DeployConfigurationCustomSetting
 */
export interface DeployConfigurationCustomSetting {
    /**
     * todo
     * @type {string}
     * @memberof DeployConfigurationCustomSetting
     */
    'color_matrix_mode'?: string;
    /**
     * todo
     * @type {string}
     * @memberof DeployConfigurationCustomSetting
     */
    'color_matrix_file_name'?: string;
    /**
     * todo
     * @type {string}
     * @memberof DeployConfigurationCustomSetting
     */
    'color_matrix_comment'?: string;
    /**
     * todo
     * @type {string}
     * @memberof DeployConfigurationCustomSetting
     */
    'gamma_mode'?: string;
    /**
     * todo
     * @type {string}
     * @memberof DeployConfigurationCustomSetting
     */
    'gamma_file_name'?: string;
    /**
     * todo
     * @type {string}
     * @memberof DeployConfigurationCustomSetting
     */
    'gamma_comment'?: string;
    /**
     * todo
     * @type {string}
     * @memberof DeployConfigurationCustomSetting
     */
    'lscisp_mode'?: string;
    /**
     * todo
     * @type {string}
     * @memberof DeployConfigurationCustomSetting
     */
    'lscisp_file_name'?: string;
    /**
     * todo
     * @type {string}
     * @memberof DeployConfigurationCustomSetting
     */
    'lscisp_comment'?: string;
    /**
     * todo
     * @type {string}
     * @memberof DeployConfigurationCustomSetting
     */
    'lscraw_mode'?: string;
    /**
     * todo
     * @type {string}
     * @memberof DeployConfigurationCustomSetting
     */
    'lscraw_file_name'?: string;
    /**
     * todo
     * @type {string}
     * @memberof DeployConfigurationCustomSetting
     */
    'lscraw_comment'?: string;
    /**
     * todo
     * @type {string}
     * @memberof DeployConfigurationCustomSetting
     */
    'prewb_mode'?: string;
    /**
     * todo
     * @type {string}
     * @memberof DeployConfigurationCustomSetting
     */
    'prewb_file_name'?: string;
    /**
     * todo
     * @type {string}
     * @memberof DeployConfigurationCustomSetting
     */
    'prewb_comment'?: string;
    /**
     * todo
     * @type {string}
     * @memberof DeployConfigurationCustomSetting
     */
    'dewarp_mode'?: string;
    /**
     * todo
     * @type {string}
     * @memberof DeployConfigurationCustomSetting
     */
    'dewarp_file_name'?: string;
    /**
     * todo
     * @type {string}
     * @memberof DeployConfigurationCustomSetting
     */
    'dewarp_comment'?: string;
}
/**
 * 
 * @export
 * @interface DeployConfigurationFirmware
 */
export interface DeployConfigurationFirmware {
    /**
     * todo
     * @type {string}
     * @memberof DeployConfigurationFirmware
     */
    'sensor_loader_file_name'?: string;
    /**
     * todo
     * @type {string}
     * @memberof DeployConfigurationFirmware
     */
    'sensor_loader_version_number'?: string;
    /**
     * todo
     * @type {string}
     * @memberof DeployConfigurationFirmware
     */
    'sensor_loader_firmware_comment'?: string;
    /**
     * todo
     * @type {string}
     * @memberof DeployConfigurationFirmware
     */
    'sensor_file_name'?: string;
    /**
     * todo
     * @type {string}
     * @memberof DeployConfigurationFirmware
     */
    'sensor_version_number'?: string;
    /**
     * todo
     * @type {string}
     * @memberof DeployConfigurationFirmware
     */
    'sensor_firmware_comment'?: string;
    /**
     * todo
     * @type {string}
     * @memberof DeployConfigurationFirmware
     */
    'apfw_file_name'?: string;
    /**
     * todo
     * @type {string}
     * @memberof DeployConfigurationFirmware
     */
    'apfw_version_number'?: string;
    /**
     * todo
     * @type {string}
     * @memberof DeployConfigurationFirmware
     */
    'apfw_firmware_comment'?: string;
}
/**
 * 
 * @export
 * @interface DeployConfigurationModel
 */
export interface DeployConfigurationModel {
    /**
     * todo
     * @type {string}
     * @memberof DeployConfigurationModel
     */
    'model_id'?: string;
    /**
     * todo
     * @type {string}
     * @memberof DeployConfigurationModel
     */
    'model_version_number'?: string;
    /**
     * todo
     * @type {string}
     * @memberof DeployConfigurationModel
     */
    'model_comment'?: string;
    /**
     * todo
     * @type {string}
     * @memberof DeployConfigurationModel
     */
    'model_version_comment'?: string;
}
/**
 * DeployDeviceApp Json Body
 * @export
 * @interface DeployDeviceAppJsonBody
 */
export interface DeployDeviceAppJsonBody {
    /**
     * App name
     * @type {string}
     * @memberof DeployDeviceAppJsonBody
     */
    'app_name': string;
    /**
     * App version number
     * @type {string}
     * @memberof DeployDeviceAppJsonBody
     */
    'version_number': string;
    /**
     * Device Ids
     * @type {string}
     * @memberof DeployDeviceAppJsonBody
     */
    'device_ids': string;
    /**
     * Deploy parameter
     * @type {string}
     * @memberof DeployDeviceAppJsonBody
     */
    'deploy_parameter'?: string;
    /**
     * Comment
     * @type {string}
     * @memberof DeployDeviceAppJsonBody
     */
    'comment'?: string;
}
/**
 * 
 * @export
 * @interface DeployHistory
 */
export interface DeployHistory {
    /**
     * todo
     * @type {number}
     * @memberof DeployHistory
     */
    'id': number;
    /**
     * todo
     * @type {string}
     * @memberof DeployHistory
     */
    'deploy_type': string;
    /**
     * todo
     * @type {string}
     * @memberof DeployHistory
     */
    'deploy_status': string;
    /**
     * todo
     * @type {string}
     * @memberof DeployHistory
     */
    'deploy_comment'?: string;
    /**
     * todo
     * @type {string}
     * @memberof DeployHistory
     */
    'replace_network_id': string;
    /**
     * todo
     * @type {string}
     * @memberof DeployHistory
     */
    'current_target': string;
    /**
     * todo
     * @type {string}
     * @memberof DeployHistory
     */
    'total_status'?: string;
    /**
     * todo
     * @type {string}
     * @memberof DeployHistory
     */
    'app_name'?: string;
    /**
     * todo
     * @type {string}
     * @memberof DeployHistory
     */
    'version_number'?: string;
    /**
     * 
     * @type {DeployHistoryFirmware}
     * @memberof DeployHistory
     */
    'firmware': DeployHistoryFirmware;
    /**
     * 
     * @type {DeployHistoryModel}
     * @memberof DeployHistory
     */
    'model': DeployHistoryModel;
    /**
     * 
     * @type {DeployHistoryCustomSetting}
     * @memberof DeployHistory
     */
    'custom_setting': DeployHistoryCustomSetting;
    /**
     * todo
     * @type {string}
     * @memberof DeployHistory
     */
    'ins_id': string;
    /**
     * todo
     * @type {string}
     * @memberof DeployHistory
     */
    'ins_date': string;
    /**
     * todo
     * @type {string}
     * @memberof DeployHistory
     */
    'upd_id': string;
    /**
     * todo
     * @type {string}
     * @memberof DeployHistory
     */
    'upd_date': string;
}
/**
 * 
 * @export
 * @interface DeployHistoryCustomSetting
 */
export interface DeployHistoryCustomSetting {
    /**
     * todo
     * @type {string}
     * @memberof DeployHistoryCustomSetting
     */
    'color_matrix_target_flg'?: string;
    /**
     * todo
     * @type {string}
     * @memberof DeployHistoryCustomSetting
     */
    'color_matrix_status'?: string;
    /**
     * todo
     * @type {number}
     * @memberof DeployHistoryCustomSetting
     */
    'color_matrix_retry_count'?: number;
    /**
     * todo
     * @type {string}
     * @memberof DeployHistoryCustomSetting
     */
    'color_matrix_start_date'?: string;
    /**
     * todo
     * @type {string}
     * @memberof DeployHistoryCustomSetting
     */
    'color_matrix_end_date'?: string;
    /**
     * todo
     * @type {string}
     * @memberof DeployHistoryCustomSetting
     */
    'color_matrix_mode'?: string;
    /**
     * todo
     * @type {string}
     * @memberof DeployHistoryCustomSetting
     */
    'color_matrix_file_name'?: string;
    /**
     * todo
     * @type {string}
     * @memberof DeployHistoryCustomSetting
     */
    'color_matrix_comment'?: string;
    /**
     * todo
     * @type {string}
     * @memberof DeployHistoryCustomSetting
     */
    'gamma_target_flg'?: string;
    /**
     * todo
     * @type {string}
     * @memberof DeployHistoryCustomSetting
     */
    'gamma_status'?: string;
    /**
     * todo
     * @type {number}
     * @memberof DeployHistoryCustomSetting
     */
    'gamma_retry_count'?: number;
    /**
     * todo
     * @type {string}
     * @memberof DeployHistoryCustomSetting
     */
    'gamma_start_date'?: string;
    /**
     * todo
     * @type {string}
     * @memberof DeployHistoryCustomSetting
     */
    'gamma_end_date'?: string;
    /**
     * todo
     * @type {string}
     * @memberof DeployHistoryCustomSetting
     */
    'gamma_mode'?: string;
    /**
     * todo
     * @type {string}
     * @memberof DeployHistoryCustomSetting
     */
    'gamma_file_name'?: string;
    /**
     * todo
     * @type {string}
     * @memberof DeployHistoryCustomSetting
     */
    'gamma_comment'?: string;
    /**
     * todo
     * @type {string}
     * @memberof DeployHistoryCustomSetting
     */
    'lscisp_target_flg'?: string;
    /**
     * todo
     * @type {string}
     * @memberof DeployHistoryCustomSetting
     */
    'lscisp_status'?: string;
    /**
     * todo
     * @type {number}
     * @memberof DeployHistoryCustomSetting
     */
    'lscisp_retry_count'?: number;
    /**
     * todo
     * @type {string}
     * @memberof DeployHistoryCustomSetting
     */
    'lscisp_start_date'?: string;
    /**
     * todo
     * @type {string}
     * @memberof DeployHistoryCustomSetting
     */
    'lscisp_end_date'?: string;
    /**
     * todo
     * @type {string}
     * @memberof DeployHistoryCustomSetting
     */
    'lscisp_mode'?: string;
    /**
     * todo
     * @type {string}
     * @memberof DeployHistoryCustomSetting
     */
    'lscisp_file_name'?: string;
    /**
     * todo
     * @type {string}
     * @memberof DeployHistoryCustomSetting
     */
    'lscisp_comment'?: string;
    /**
     * todo
     * @type {string}
     * @memberof DeployHistoryCustomSetting
     */
    'lscraw_target_flg'?: string;
    /**
     * todo
     * @type {string}
     * @memberof DeployHistoryCustomSetting
     */
    'lscraw_status'?: string;
    /**
     * todo
     * @type {number}
     * @memberof DeployHistoryCustomSetting
     */
    'lscraw_retry_count'?: number;
    /**
     * todo
     * @type {string}
     * @memberof DeployHistoryCustomSetting
     */
    'lscraw_start_date'?: string;
    /**
     * todo
     * @type {string}
     * @memberof DeployHistoryCustomSetting
     */
    'lscraw_end_date'?: string;
    /**
     * todo
     * @type {string}
     * @memberof DeployHistoryCustomSetting
     */
    'lscraw_mode'?: string;
    /**
     * todo
     * @type {string}
     * @memberof DeployHistoryCustomSetting
     */
    'lscraw_file_name'?: string;
    /**
     * todo
     * @type {string}
     * @memberof DeployHistoryCustomSetting
     */
    'lscraw_comment'?: string;
    /**
     * todo
     * @type {string}
     * @memberof DeployHistoryCustomSetting
     */
    'prewb_target_flg'?: string;
    /**
     * todo
     * @type {string}
     * @memberof DeployHistoryCustomSetting
     */
    'prewb_status'?: string;
    /**
     * todo
     * @type {number}
     * @memberof DeployHistoryCustomSetting
     */
    'prewb_retry_count'?: number;
    /**
     * todo
     * @type {string}
     * @memberof DeployHistoryCustomSetting
     */
    'prewb_start_date'?: string;
    /**
     * todo
     * @type {string}
     * @memberof DeployHistoryCustomSetting
     */
    'prewb_end_date'?: string;
    /**
     * todo
     * @type {string}
     * @memberof DeployHistoryCustomSetting
     */
    'prewb_mode'?: string;
    /**
     * todo
     * @type {string}
     * @memberof DeployHistoryCustomSetting
     */
    'prewb_file_name'?: string;
    /**
     * todo
     * @type {string}
     * @memberof DeployHistoryCustomSetting
     */
    'prewb_comment'?: string;
    /**
     * todo
     * @type {string}
     * @memberof DeployHistoryCustomSetting
     */
    'dewarp_target_flg'?: string;
    /**
     * todo
     * @type {string}
     * @memberof DeployHistoryCustomSetting
     */
    'dewarp_status'?: string;
    /**
     * todo
     * @type {number}
     * @memberof DeployHistoryCustomSetting
     */
    'dewarp_retry_count'?: number;
    /**
     * todo
     * @type {string}
     * @memberof DeployHistoryCustomSetting
     */
    'dewarp_start_date'?: string;
    /**
     * todo
     * @type {string}
     * @memberof DeployHistoryCustomSetting
     */
    'dewarp_end_date'?: string;
    /**
     * todo
     * @type {string}
     * @memberof DeployHistoryCustomSetting
     */
    'dewarp_mode'?: string;
    /**
     * todo
     * @type {string}
     * @memberof DeployHistoryCustomSetting
     */
    'dewarp_file_name'?: string;
    /**
     * todo
     * @type {string}
     * @memberof DeployHistoryCustomSetting
     */
    'dewarp_comment'?: string;
}
/**
 * 
 * @export
 * @interface DeployHistoryFirmware
 */
export interface DeployHistoryFirmware {
    /**
     * todo
     * @type {string}
     * @memberof DeployHistoryFirmware
     */
    'sensor_loader_target_flg'?: string;
    /**
     * todo
     * @type {string}
     * @memberof DeployHistoryFirmware
     */
    'sensor_loader_status'?: string;
    /**
     * todo
     * @type {number}
     * @memberof DeployHistoryFirmware
     */
    'sensor_loader_retry_count'?: number;
    /**
     * todo
     * @type {string}
     * @memberof DeployHistoryFirmware
     */
    'sensor_loader_start_date'?: string;
    /**
     * todo
     * @type {string}
     * @memberof DeployHistoryFirmware
     */
    'sensor_loader_end_date'?: string;
    /**
     * todo
     * @type {string}
     * @memberof DeployHistoryFirmware
     */
    'sensor_loader_version_number'?: string;
    /**
     * todo
     * @type {string}
     * @memberof DeployHistoryFirmware
     */
    'sensor_loader_version_comment'?: string;
    /**
     * todo
     * @type {string}
     * @memberof DeployHistoryFirmware
     */
    'sensor_target_flg'?: string;
    /**
     * todo
     * @type {string}
     * @memberof DeployHistoryFirmware
     */
    'sensor_status'?: string;
    /**
     * todo
     * @type {number}
     * @memberof DeployHistoryFirmware
     */
    'sensor_retry_count'?: number;
    /**
     * todo
     * @type {string}
     * @memberof DeployHistoryFirmware
     */
    'sensor_start_date'?: string;
    /**
     * todo
     * @type {string}
     * @memberof DeployHistoryFirmware
     */
    'sensor_end_date'?: string;
    /**
     * todo
     * @type {string}
     * @memberof DeployHistoryFirmware
     */
    'sensor_version_number'?: string;
    /**
     * todo
     * @type {string}
     * @memberof DeployHistoryFirmware
     */
    'sensor_version_comment'?: string;
    /**
     * todo
     * @type {string}
     * @memberof DeployHistoryFirmware
     */
    'apfw_target_flg'?: string;
    /**
     * todo
     * @type {string}
     * @memberof DeployHistoryFirmware
     */
    'apfw_status'?: string;
    /**
     * todo
     * @type {number}
     * @memberof DeployHistoryFirmware
     */
    'apfw_retry_count'?: number;
    /**
     * todo
     * @type {string}
     * @memberof DeployHistoryFirmware
     */
    'apfw_start_date'?: string;
    /**
     * todo
     * @type {string}
     * @memberof DeployHistoryFirmware
     */
    'apfw_end_date'?: string;
    /**
     * todo
     * @type {string}
     * @memberof DeployHistoryFirmware
     */
    'apfw_version_number'?: string;
    /**
     * todo
     * @type {string}
     * @memberof DeployHistoryFirmware
     */
    'apfw_version_comment'?: string;
}
/**
 * 
 * @export
 * @interface DeployHistoryModel
 */
export interface DeployHistoryModel {
    /**
     * todo
     * @type {string}
     * @memberof DeployHistoryModel
     */
    'model_target_flg'?: string;
    /**
     * todo
     * @type {string}
     * @memberof DeployHistoryModel
     */
    'model_status'?: string;
    /**
     * todo
     * @type {number}
     * @memberof DeployHistoryModel
     */
    'model_retry_count'?: number;
    /**
     * todo
     * @type {string}
     * @memberof DeployHistoryModel
     */
    'model_start_date'?: string;
    /**
     * todo
     * @type {string}
     * @memberof DeployHistoryModel
     */
    'model_end_date'?: string;
    /**
     * todo
     * @type {string}
     * @memberof DeployHistoryModel
     */
    'model_id'?: string;
    /**
     * todo
     * @type {string}
     * @memberof DeployHistoryModel
     */
    'model_version_number'?: string;
    /**
     * todo
     * @type {string}
     * @memberof DeployHistoryModel
     */
    'model_comment'?: string;
    /**
     * todo
     * @type {string}
     * @memberof DeployHistoryModel
     */
    'model_version_comment'?: string;
    /**
     * todo
     * @type {string}
     * @memberof DeployHistoryModel
     */
    'dnn_param_setting_target_flg'?: string;
    /**
     * todo
     * @type {string}
     * @memberof DeployHistoryModel
     */
    'dnn_param_setting_status'?: string;
    /**
     * todo
     * @type {number}
     * @memberof DeployHistoryModel
     */
    'dnn_param_setting_retry_count'?: number;
    /**
     * todo
     * @type {string}
     * @memberof DeployHistoryModel
     */
    'dnn_param_setting_start_date'?: string;
    /**
     * todo
     * @type {string}
     * @memberof DeployHistoryModel
     */
    'dnn_param_setting_end_date&quot;'?: string;
}
/**
 * 
 * @export
 * @interface Device
 */
export interface Device {
    /**
     * todo
     * @type {string}
     * @memberof Device
     */
    'device_id': string;
    /**
     * todo
     * @type {string}
     * @memberof Device
     */
    'place'?: string;
    /**
     * todo
     * @type {string}
     * @memberof Device
     */
    'comment'?: string;
    /**
     * 
     * @type {DeviceProperty}
     * @memberof Device
     */
    'property'?: DeviceProperty;
    /**
     * todo
     * @type {string}
     * @memberof Device
     */
    'ins_id': string;
    /**
     * todo
     * @type {string}
     * @memberof Device
     */
    'ins_date': string;
    /**
     * todo
     * @type {string}
     * @memberof Device
     */
    'upd_id': string;
    /**
     * todo
     * @type {string}
     * @memberof Device
     */
    'upd_date': string;
    /**
     * todo
     * @type {string}
     * @memberof Device
     */
    'connectionState': string;
    /**
     * todo
     * @type {string}
     * @memberof Device
     */
    'lastActivityTime': string;
    /**
     * 
     * @type {Array<DeviceModelsInner>}
     * @memberof Device
     */
    'models'?: Array<DeviceModelsInner>;
    /**
     * 
     * @type {Array<DeviceDeviceGroupsInner>}
     * @memberof Device
     */
    'device_groups'?: Array<DeviceDeviceGroupsInner>;
}
/**
 * 
 * @export
 * @interface DeviceApp
 */
export interface DeviceApp {
    /**
     * todo
     * @type {string}
     * @memberof DeviceApp
     */
    'name'?: string;
    /**
     * 
     * @type {Array<DeviceAppVersionsInner>}
     * @memberof DeviceApp
     */
    'versions'?: Array<DeviceAppVersionsInner>;
}
/**
 * 
 * @export
 * @interface DeviceAppDeployHistory
 */
export interface DeviceAppDeployHistory {
    /**
     * todo
     * @type {number}
     * @memberof DeviceAppDeployHistory
     */
    'id'?: number;
    /**
     * todo
     * @type {string}
     * @memberof DeviceAppDeployHistory
     */
    'total_status'?: string;
    /**
     * todo
     * @type {string}
     * @memberof DeviceAppDeployHistory
     */
    'deploy_parameter'?: string;
    /**
     * 
     * @type {Array<DeviceAppDeployHistoryDevicesInner>}
     * @memberof DeviceAppDeployHistory
     */
    'devices'?: Array<DeviceAppDeployHistoryDevicesInner>;
    /**
     * todo
     * @type {string}
     * @memberof DeviceAppDeployHistory
     */
    'ins_id'?: string;
    /**
     * todo
     * @type {string}
     * @memberof DeviceAppDeployHistory
     */
    'ins_date'?: string;
    /**
     * todo
     * @type {string}
     * @memberof DeviceAppDeployHistory
     */
    'upd_id'?: string;
    /**
     * todo
     * @type {string}
     * @memberof DeviceAppDeployHistory
     */
    'upd_date'?: string;
}
/**
 * 
 * @export
 * @interface DeviceAppDeployHistoryDevicesInner
 */
export interface DeviceAppDeployHistoryDevicesInner {
    /**
     * todo
     * @type {string}
     * @memberof DeviceAppDeployHistoryDevicesInner
     */
    'device_id'?: string;
    /**
     * todo
     * @type {string}
     * @memberof DeviceAppDeployHistoryDevicesInner
     */
    'status'?: string;
    /**
     * todo
     * @type {string}
     * @memberof DeviceAppDeployHistoryDevicesInner
     */
    'latest_deployment_flg'?: string;
}
/**
 * 
 * @export
 * @interface DeviceAppVersionsInner
 */
export interface DeviceAppVersionsInner {
    /**
     * todo
     * @type {string}
     * @memberof DeviceAppVersionsInner
     */
    'version'?: string;
    /**
     * todo
     * @type {string}
     * @memberof DeviceAppVersionsInner
     */
    'compiled_flg'?: string;
    /**
     * todo
     * @type {string}
     * @memberof DeviceAppVersionsInner
     */
    'status'?: string;
    /**
     * todo
     * @type {string}
     * @memberof DeviceAppVersionsInner
     */
    'comment'?: string;
    /**
     * todo
     * @type {string}
     * @memberof DeviceAppVersionsInner
     */
    'deploy_count'?: string;
    /**
     * todo
     * @type {string}
     * @memberof DeviceAppVersionsInner
     */
    'ins_id'?: string;
    /**
     * todo
     * @type {string}
     * @memberof DeviceAppVersionsInner
     */
    'ins_date'?: string;
    /**
     * todo
     * @type {string}
     * @memberof DeviceAppVersionsInner
     */
    'upd_id'?: string;
    /**
     * todo
     * @type {string}
     * @memberof DeviceAppVersionsInner
     */
    'upd_date'?: string;
}
/**
 * 
 * @export
 * @interface DeviceDeviceGroupsInner
 */
export interface DeviceDeviceGroupsInner {
    /**
     * todo
     * @type {string}
     * @memberof DeviceDeviceGroupsInner
     */
    'device_group_id': string;
    /**
     * todo
     * @type {string}
     * @memberof DeviceDeviceGroupsInner
     */
    'device_type': string;
    /**
     * todo
     * @type {string}
     * @memberof DeviceDeviceGroupsInner
     */
    'comment'?: string;
    /**
     * todo
     * @type {string}
     * @memberof DeviceDeviceGroupsInner
     */
    'ins_id': string;
    /**
     * todo
     * @type {string}
     * @memberof DeviceDeviceGroupsInner
     */
    'ins_date': string;
    /**
     * todo
     * @type {string}
     * @memberof DeviceDeviceGroupsInner
     */
    'upd_id': string;
    /**
     * todo
     * @type {string}
     * @memberof DeviceDeviceGroupsInner
     */
    'upd_date': string;
}
/**
 * 
 * @export
 * @interface DeviceGroup
 */
export interface DeviceGroup {
    /**
     * todo
     * @type {string}
     * @memberof DeviceGroup
     */
    'device_group_id'?: string;
    /**
     * todo
     * @type {string}
     * @memberof DeviceGroup
     */
    'device_type'?: string;
    /**
     * todo
     * @type {string}
     * @memberof DeviceGroup
     */
    'comment'?: string;
    /**
     * todo
     * @type {string}
     * @memberof DeviceGroup
     */
    'ins_id'?: string;
    /**
     * todo
     * @type {string}
     * @memberof DeviceGroup
     */
    'ins_date'?: string;
    /**
     * todo
     * @type {string}
     * @memberof DeviceGroup
     */
    'upd_id'?: string;
    /**
     * todo
     * @type {string}
     * @memberof DeviceGroup
     */
    'upd_date'?: string;
    /**
     * 
     * @type {Array<DeviceGroupDevicesInner>}
     * @memberof DeviceGroup
     */
    'devices'?: Array<DeviceGroupDevicesInner>;
}
/**
 * 
 * @export
 * @interface DeviceGroupDevicesInner
 */
export interface DeviceGroupDevicesInner {
    /**
     * todo
     * @type {string}
     * @memberof DeviceGroupDevicesInner
     */
    'device_id'?: string;
    /**
     * todo
     * @type {string}
     * @memberof DeviceGroupDevicesInner
     */
    'place'?: string;
    /**
     * todo
     * @type {string}
     * @memberof DeviceGroupDevicesInner
     */
    'comment'?: string;
    /**
     * todo
     * @type {string}
     * @memberof DeviceGroupDevicesInner
     */
    'ins_id'?: string;
    /**
     * todo
     * @type {string}
     * @memberof DeviceGroupDevicesInner
     */
    'ins_date'?: string;
    /**
     * todo
     * @type {string}
     * @memberof DeviceGroupDevicesInner
     */
    'upd_id'?: string;
    /**
     * todo
     * @type {string}
     * @memberof DeviceGroupDevicesInner
     */
    'upd_date'?: string;
}
/**
 * 
 * @export
 * @interface DeviceModelsInner
 */
export interface DeviceModelsInner {
    /**
     * todo
     * @type {string}
     * @memberof DeviceModelsInner
     */
    'model_version_id'?: string;
}
/**
 * 
 * @export
 * @interface DeviceProperty
 */
export interface DeviceProperty {
    /**
     * todo
     * @type {string}
     * @memberof DeviceProperty
     */
    'device_name': string;
    /**
     * todo
     * @type {string}
     * @memberof DeviceProperty
     */
    'internal_device_id': string;
}
/**
 * EnrollDevice Json Body
 * @export
 * @interface EnrollDeviceJsonBody
 */
export interface EnrollDeviceJsonBody {
    /**
     * Device Name
     * @type {string}
     * @memberof EnrollDeviceJsonBody
     */
    'device_name': string;
    /**
     * Device Type
     * @type {string}
     * @memberof EnrollDeviceJsonBody
     */
    'device_type': string;
    /**
     * Primary Certificate
     * @type {string}
     * @memberof EnrollDeviceJsonBody
     */
    'primary_certificate': string;
}
/**
 * 
 * @export
 * @interface ErrorResponse
 */
export interface ErrorResponse {
    /**
     * todo
     * @type {string}
     * @memberof ErrorResponse
     */
    'result': string;
    /**
     * todo
     * @type {string}
     * @memberof ErrorResponse
     */
    'code': string;
    /**
     * todo
     * @type {string}
     * @memberof ErrorResponse
     */
    'message': string;
    /**
     * todo
     * @type {string}
     * @memberof ErrorResponse
     */
    'time': string;
}
/**
 * 
 * @export
 * @interface ExportImages200Response
 */
export interface ExportImages200Response {
    /**
     * todo
     * @type {string}
     * @memberof ExportImages200Response
     */
    'key'?: string;
    /**
     * todo
     * @type {string}
     * @memberof ExportImages200Response
     */
    'url'?: string;
}
/**
 * 
 * @export
 * @interface Firmware
 */
export interface Firmware {
    /**
     * todo
     * @type {string}
     * @memberof Firmware
     */
    'firmware_id'?: string;
    /**
     * todo
     * @type {string}
     * @memberof Firmware
     */
    'firmware_type'?: string;
    /**
     * todo
     * @type {string}
     * @memberof Firmware
     */
    'comment'?: string;
    /**
     * todo
     * @type {string}
     * @memberof Firmware
     */
    'ins_id'?: string;
    /**
     * todo
     * @type {string}
     * @memberof Firmware
     */
    'ins_date'?: string;
    /**
     * todo
     * @type {string}
     * @memberof Firmware
     */
    'upd_id'?: string;
    /**
     * todo
     * @type {string}
     * @memberof Firmware
     */
    'upd_date'?: string;
    /**
     * 
     * @type {Array<FirmwareVersionsInner>}
     * @memberof Firmware
     */
    'versions'?: Array<FirmwareVersionsInner>;
}
/**
 * 
 * @export
 * @interface FirmwareVersionsInner
 */
export interface FirmwareVersionsInner {
    /**
     * todo
     * @type {string}
     * @memberof FirmwareVersionsInner
     */
    'file_name'?: string;
    /**
     * todo
     * @type {string}
     * @memberof FirmwareVersionsInner
     */
    'version_number'?: string;
    /**
     * todo
     * @type {string}
     * @memberof FirmwareVersionsInner
     */
    'ppl'?: string;
    /**
     * todo
     * @type {string}
     * @memberof FirmwareVersionsInner
     */
    'stored_type'?: string;
    /**
     * todo
     * @type {string}
     * @memberof FirmwareVersionsInner
     */
    'stored_uri'?: string;
    /**
     * todo
     * @type {string}
     * @memberof FirmwareVersionsInner
     */
    'comment'?: string;
    /**
     * todo
     * @type {string}
     * @memberof FirmwareVersionsInner
     */
    'ins_id'?: string;
    /**
     * todo
     * @type {string}
     * @memberof FirmwareVersionsInner
     */
    'ins_date'?: string;
    /**
     * todo
     * @type {string}
     * @memberof FirmwareVersionsInner
     */
    'upd_id'?: string;
    /**
     * todo
     * @type {string}
     * @memberof FirmwareVersionsInner
     */
    'upd_date'?: string;
}
/**
 * 
 * @export
 * @interface GetCommandParameter200Response
 */
export interface GetCommandParameter200Response {
    /**
     * 
     * @type {Array<GetCommandParameter200ResponseParameterListInner>}
     * @memberof GetCommandParameter200Response
     */
    'parameter_list': Array<GetCommandParameter200ResponseParameterListInner>;
}
/**
 * 
 * @export
 * @interface GetCommandParameter200ResponseParameterListInner
 */
export interface GetCommandParameter200ResponseParameterListInner {
    /**
     * 
     * @type {GetCommandParameter200ResponseParameterListInnerParameter}
     * @memberof GetCommandParameter200ResponseParameterListInner
     */
    'parameter': GetCommandParameter200ResponseParameterListInnerParameter;
    /**
     * FileName
     * @type {string}
     * @memberof GetCommandParameter200ResponseParameterListInner
     */
    'file_name': string;
    /**
     * Comment
     * @type {string}
     * @memberof GetCommandParameter200ResponseParameterListInner
     */
    'comment'?: string;
    /**
     * Default file flg
     * @type {string}
     * @memberof GetCommandParameter200ResponseParameterListInner
     */
    'isdefault': string;
    /**
     * Target device list.
     * @type {Array<string>}
     * @memberof GetCommandParameter200ResponseParameterListInner
     */
    'device_ids'?: Array<string>;
    /**
     * Set the author of the configuration.
     * @type {string}
     * @memberof GetCommandParameter200ResponseParameterListInner
     */
    'ins_id': string;
    /**
     * Set the creation date and time for the configuration.
     * @type {string}
     * @memberof GetCommandParameter200ResponseParameterListInner
     */
    'ins_date': string;
    /**
     * Set the settings updater.
     * @type {string}
     * @memberof GetCommandParameter200ResponseParameterListInner
     */
    'upd_id': string;
    /**
     * Set the update date and time for the setting.
     * @type {string}
     * @memberof GetCommandParameter200ResponseParameterListInner
     */
    'upd_date': string;
}
/**
 * 
 * @export
 * @interface GetCommandParameter200ResponseParameterListInnerParameter
 */
export interface GetCommandParameter200ResponseParameterListInnerParameter {
    /**
     * 
     * @type {Array<GetCommandParameter200ResponseParameterListInnerParameterCommandsInner>}
     * @memberof GetCommandParameter200ResponseParameterListInnerParameter
     */
    'commands': Array<GetCommandParameter200ResponseParameterListInnerParameterCommandsInner>;
}
/**
 * 
 * @export
 * @interface GetCommandParameter200ResponseParameterListInnerParameterCommandsInner
 */
export interface GetCommandParameter200ResponseParameterListInnerParameterCommandsInner {
    /**
     * todo
     * @type {string}
     * @memberof GetCommandParameter200ResponseParameterListInnerParameterCommandsInner
     */
    'command_name': string;
    /**
     * 
     * @type {GetCommandParameter200ResponseParameterListInnerParameterCommandsInnerParameters}
     * @memberof GetCommandParameter200ResponseParameterListInnerParameterCommandsInner
     */
    'parameters': GetCommandParameter200ResponseParameterListInnerParameterCommandsInnerParameters;
}
/**
 * 
 * @export
 * @interface GetCommandParameter200ResponseParameterListInnerParameterCommandsInnerParameters
 */
export interface GetCommandParameter200ResponseParameterListInnerParameterCommandsInnerParameters {
    /**
     * todo
     * @type {number}
     * @memberof GetCommandParameter200ResponseParameterListInnerParameterCommandsInnerParameters
     */
    'Mode'?: number;
    /**
     * todo
     * @type {string}
     * @memberof GetCommandParameter200ResponseParameterListInnerParameterCommandsInnerParameters
     */
    'UploadMethod'?: string;
    /**
     * todo
     * @type {string}
     * @memberof GetCommandParameter200ResponseParameterListInnerParameterCommandsInnerParameters
     */
    'FileFormat'?: string;
    /**
     * todo
     * @type {string}
     * @memberof GetCommandParameter200ResponseParameterListInnerParameterCommandsInnerParameters
     */
    'UploadMethodIR'?: string;
    /**
     * todo
     * @type {number}
     * @memberof GetCommandParameter200ResponseParameterListInnerParameterCommandsInnerParameters
     */
    'CropHOffset'?: number;
    /**
     * todo
     * @type {number}
     * @memberof GetCommandParameter200ResponseParameterListInnerParameterCommandsInnerParameters
     */
    'CropVOffset'?: number;
    /**
     * todo
     * @type {number}
     * @memberof GetCommandParameter200ResponseParameterListInnerParameterCommandsInnerParameters
     */
    'CropHSize'?: number;
    /**
     * todo
     * @type {number}
     * @memberof GetCommandParameter200ResponseParameterListInnerParameterCommandsInnerParameters
     */
    'CropVSize'?: number;
    /**
     * todo
     * @type {number}
     * @memberof GetCommandParameter200ResponseParameterListInnerParameterCommandsInnerParameters
     */
    'NumberOfImages'?: number;
    /**
     * todo
     * @type {number}
     * @memberof GetCommandParameter200ResponseParameterListInnerParameterCommandsInnerParameters
     */
    'UploadInterval'?: number;
    /**
     * todo
     * @type {number}
     * @memberof GetCommandParameter200ResponseParameterListInnerParameterCommandsInnerParameters
     */
    'NumberOfInferencesPerMessage'?: number;
    /**
     * todo
     * @type {number}
     * @memberof GetCommandParameter200ResponseParameterListInnerParameterCommandsInnerParameters
     */
    'MaxDetectionsPerFrame'?: number;
    /**
     * todo
     * @type {string}
     * @memberof GetCommandParameter200ResponseParameterListInnerParameterCommandsInnerParameters
     */
    'ModelId'?: string;
    /**
     * todo
     * @type {object}
     * @memberof GetCommandParameter200ResponseParameterListInnerParameterCommandsInnerParameters
     */
    'PPLParameter'?: object;
}
/**
 * 
 * @export
 * @interface GetDeployConfigurations200Response
 */
export interface GetDeployConfigurations200Response {
    /**
     * 
     * @type {Array<DeployConfiguration>}
     * @memberof GetDeployConfigurations200Response
     */
    'devices'?: Array<DeployConfiguration>;
}
/**
 * 
 * @export
 * @interface GetDeployHistory200Response
 */
export interface GetDeployHistory200Response {
    /**
     * 
     * @type {Array<DeployHistory>}
     * @memberof GetDeployHistory200Response
     */
    'deploys': Array<DeployHistory>;
}
/**
 * 
 * @export
 * @interface GetDeviceAppDeploys200Response
 */
export interface GetDeviceAppDeploys200Response {
    /**
     * 
     * @type {Array<DeviceAppDeployHistory>}
     * @memberof GetDeviceAppDeploys200Response
     */
    'deploys': Array<DeviceAppDeployHistory>;
}
/**
 * 
 * @export
 * @interface GetDeviceApps200Response
 */
export interface GetDeviceApps200Response {
    /**
     * 
     * @type {Array<DeviceApp>}
     * @memberof GetDeviceApps200Response
     */
    'apps': Array<DeviceApp>;
}
/**
 * 
 * @export
 * @interface GetDeviceAppsResponse
 */
export interface GetDeviceAppsResponse {
    /**
     * 
     * @type {Array<GetDeviceAppsResponseApps>}
     * @memberof GetDeviceAppsResponse
     */
    'apps': Array<GetDeviceAppsResponseApps>;
}
/**
 * 
 * @export
 * @interface GetDeviceAppsResponseApps
 */
export interface GetDeviceAppsResponseApps {
    /**
     * 
     * @type {string}
     * @memberof GetDeviceAppsResponseApps
     */
    'name': string;
    /**
     * 
     * @type {Array<GetDeviceAppsResponseVersions>}
     * @memberof GetDeviceAppsResponseApps
     */
    'versions': Array<GetDeviceAppsResponseVersions>;
}
/**
 * 
 * @export
 * @interface GetDeviceAppsResponseVersions
 */
export interface GetDeviceAppsResponseVersions {
    /**
     * 
     * @type {string}
     * @memberof GetDeviceAppsResponseVersions
     */
    'version': string;
    /**
     * 
     * @type {string}
     * @memberof GetDeviceAppsResponseVersions
     */
    'compiled_flg': string;
    /**
     * 
     * @type {string}
     * @memberof GetDeviceAppsResponseVersions
     */
    'status': string;
    /**
     * 
     * @type {string}
     * @memberof GetDeviceAppsResponseVersions
     */
    'comment': string;
    /**
     * 
     * @type {string}
     * @memberof GetDeviceAppsResponseVersions
     */
    'deploy_count': string;
    /**
     * 
     * @type {string}
     * @memberof GetDeviceAppsResponseVersions
     */
    'ins_id': string;
    /**
     * 
     * @type {string}
     * @memberof GetDeviceAppsResponseVersions
     */
    'ins_date': string;
    /**
     * 
     * @type {string}
     * @memberof GetDeviceAppsResponseVersions
     */
    'upd_id': string;
    /**
     * 
     * @type {string}
     * @memberof GetDeviceAppsResponseVersions
     */
    'upd_date': string;
}
/**
 * 
 * @export
 * @interface GetDevices200Response
 */
export interface GetDevices200Response {
    /**
     * 
     * @type {Array<Device>}
     * @memberof GetDevices200Response
     */
    'devices': Array<Device>;
}
/**
 * 
 * @export
 * @interface GetImageDirectories200ResponseInner
 */
export interface GetImageDirectories200ResponseInner {
    /**
     * todo
     * @type {string}
     * @memberof GetImageDirectories200ResponseInner
     */
    'group_id': string;
    /**
     * todo
     * @type {Array<GetImageDirectories200ResponseInnerDevicesInner>}
     * @memberof GetImageDirectories200ResponseInner
     */
    'devices': Array<GetImageDirectories200ResponseInnerDevicesInner>;
}
/**
 * 
 * @export
 * @interface GetImageDirectories200ResponseInnerDevicesInner
 */
export interface GetImageDirectories200ResponseInnerDevicesInner {
    /**
     * todo
     * @type {string}
     * @memberof GetImageDirectories200ResponseInnerDevicesInner
     */
    'device_id': string;
    /**
     * todo
     * @type {string}
     * @memberof GetImageDirectories200ResponseInnerDevicesInner
     */
    'device_name': string;
    /**
     * todo
     * @type {Array<string>}
     * @memberof GetImageDirectories200ResponseInnerDevicesInner
     */
    'Image': Array<string>;
}
/**
 * 
 * @export
 * @interface GetImages200Response
 */
export interface GetImages200Response {
    /**
     * todo
     * @type {number}
     * @memberof GetImages200Response
     */
    'total_image_count': number;
    /**
     * 
     * @type {Array<GetImages200ResponseImagesInner>}
     * @memberof GetImages200Response
     */
    'images': Array<GetImages200ResponseImagesInner>;
}
/**
 * 
 * @export
 * @interface GetImages200ResponseImagesInner
 */
export interface GetImages200ResponseImagesInner {
    /**
     * todo
     * @type {string}
     * @memberof GetImages200ResponseImagesInner
     */
    'name': string;
    /**
     * todo
     * @type {string}
     * @memberof GetImages200ResponseImagesInner
     */
    'contents': string;
}
/**
 * 
 * @export
 * @interface GetInferenceResults200ResponseInner
 */
export interface GetInferenceResults200ResponseInner {
    /**
     * 
     * @type {string}
     * @memberof GetInferenceResults200ResponseInner
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetInferenceResults200ResponseInner
     */
    'device_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetInferenceResults200ResponseInner
     */
    'model_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetInferenceResults200ResponseInner
     */
    'version_number'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetInferenceResults200ResponseInner
     */
    'model_version_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetInferenceResults200ResponseInner
     */
    'model_type'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetInferenceResults200ResponseInner
     */
    'training_kit_name'?: string;
    /**
     * 
     * @type {number}
     * @memberof GetInferenceResults200ResponseInner
     */
    '_ts'?: number;
    /**
     * 
     * @type {InferenceResult}
     * @memberof GetInferenceResults200ResponseInner
     */
    'inference_result'?: InferenceResult;
    /**
     * todo
     * @type {Array<Inference>}
     * @memberof GetInferenceResults200ResponseInner
     */
    'inferences'?: Array<Inference>;
}
/**
 * 
 * @export
 * @interface GetModels200Response
 */
export interface GetModels200Response {
    /**
     * 
     * @type {Array<Model>}
     * @memberof GetModels200Response
     */
    'models'?: Array<Model>;
}
/**
 * 
 * @export
 * @interface HTTPValidationError
 */
export interface HTTPValidationError {
    /**
     * 
     * @type {Array<ValidationError>}
     * @memberof HTTPValidationError
     */
    'detail'?: Array<ValidationError>;
}
/**
 * ImportCameraConfigurationFile Json Body
 * @export
 * @interface ImportCameraConfigurationFileJsonBody
 */
export interface ImportCameraConfigurationFileJsonBody {
    /**
     * Contents
     * @type {string}
     * @memberof ImportCameraConfigurationFileJsonBody
     */
    'contents': string;
    /**
     * FileName
     * @type {string}
     * @memberof ImportCameraConfigurationFileJsonBody
     */
    'file_name': string;
    /**
     * Comment
     * @type {string}
     * @memberof ImportCameraConfigurationFileJsonBody
     */
    'comment': string;
}
/**
 * ImportDeviceApp Json Body
 * @export
 * @interface ImportDeviceAppJsonBody
 */
export interface ImportDeviceAppJsonBody {
    /**
     * Compiled flg(0:not compiled, 1:Compiled)
     * @type {string}
     * @memberof ImportDeviceAppJsonBody
     */
    'compiled_flg': string;
    /**
     * App entry point
     * @type {string}
     * @memberof ImportDeviceAppJsonBody
     */
    'entry_point'?: string;
    /**
     * App name
     * @type {string}
     * @memberof ImportDeviceAppJsonBody
     */
    'app_name': string;
    /**
     * App version number123
     * @type {string}
     * @memberof ImportDeviceAppJsonBody
     */
    'version_number': string;
    /**
     * Comment
     * @type {string}
     * @memberof ImportDeviceAppJsonBody
     */
    'comment'?: string;
    /**
     * FileName
     * @type {string}
     * @memberof ImportDeviceAppJsonBody
     */
    'file_name': string;
    /**
     * File content
     * @type {string}
     * @memberof ImportDeviceAppJsonBody
     */
    'file_content': string;
}
/**
 * 
 * @export
 * @interface Inference
 */
export interface Inference {
    /**
     * todo
     * @type {string}
     * @memberof Inference
     */
    'T'?: string;
    /**
     * todo
     * @type {string}
     * @memberof Inference
     */
    'O'?: string;
}
/**
 * 
 * @export
 * @interface InferenceResult
 */
export interface InferenceResult {
    /**
     * 
     * @type {string}
     * @memberof InferenceResult
     */
    'DeviceID'?: string;
    /**
     * 
     * @type {string}
     * @memberof InferenceResult
     */
    'ModelID'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof InferenceResult
     */
    'Image'?: boolean;
    /**
     * todo
     * @type {Array<Inference>}
     * @memberof InferenceResult
     */
    'Inferences'?: Array<Inference>;
    /**
     * 
     * @type {string}
     * @memberof InferenceResult
     */
    'id'?: string;
    /**
     * 
     * @type {number}
     * @memberof InferenceResult
     */
    'ttl'?: number;
    /**
     * 
     * @type {string}
     * @memberof InferenceResult
     */
    '_rid'?: string;
    /**
     * 
     * @type {string}
     * @memberof InferenceResult
     */
    '_self'?: string;
    /**
     * 
     * @type {string}
     * @memberof InferenceResult
     */
    '_etag'?: string;
    /**
     * 
     * @type {string}
     * @memberof InferenceResult
     */
    '_attachments'?: string;
    /**
     * 
     * @type {number}
     * @memberof InferenceResult
     */
    '_ts'?: number;
}
/**
 * 
 * @export
 * @interface LocationInner
 */
export interface LocationInner {
}
/**
 * 
 * @export
 * @interface Model
 */
export interface Model {
    /**
     * todo
     * @type {string}
     * @memberof Model
     */
    'model_id'?: string;
    /**
     * todo
     * @type {string}
     * @memberof Model
     */
    'device_type'?: string;
    /**
     * todo
     * @type {string}
     * @memberof Model
     */
    'functionality'?: string;
    /**
     * todo
     * @type {string}
     * @memberof Model
     */
    'vendor_name'?: string;
    /**
     * todo
     * @type {string}
     * @memberof Model
     */
    'model_comment'?: string;
    /**
     * todo
     * @type {string}
     * @memberof Model
     */
    'network_type'?: string;
    /**
     * 
     * @type {Array<ModelProject>}
     * @memberof Model
     */
    'projects'?: Array<ModelProject>;
}
/**
 * 
 * @export
 * @interface ModelProject
 */
export interface ModelProject {
    /**
     * todo
     * @type {string}
     * @memberof ModelProject
     */
    'model_project_name'?: string;
    /**
     * todo
     * @type {string}
     * @memberof ModelProject
     */
    'model_project_id'?: string;
    /**
     * todo
     * @type {string}
     * @memberof ModelProject
     */
    'model_platform'?: string;
    /**
     * todo
     * @type {string}
     * @memberof ModelProject
     */
    'model_type'?: string;
    /**
     * todo
     * @type {string}
     * @memberof ModelProject
     */
    'project_type'?: string;
    /**
     * todo
     * @type {string}
     * @memberof ModelProject
     */
    'device_id'?: string;
    /**
     * 
     * @type {Array<ModelVersion>}
     * @memberof ModelProject
     */
    'versions'?: Array<ModelVersion>;
}
/**
 * 
 * @export
 * @interface ModelVersion
 */
export interface ModelVersion {
    /**
     * todo
     * @type {string}
     * @memberof ModelVersion
     */
    'version_number'?: string;
    /**
     * todo
     * @type {string}
     * @memberof ModelVersion
     */
    'iteration_id'?: string;
    /**
     * todo
     * @type {string}
     * @memberof ModelVersion
     */
    'iteration_name'?: string;
    /**
     * todo
     * @type {string}
     * @memberof ModelVersion
     */
    'accuracy'?: string;
    /**
     * todo
     * @type {object}
     * @memberof ModelVersion
     */
    'model_performances'?: object;
    /**
     * todo
     * @type {string}
     * @memberof ModelVersion
     */
    'latest_flg'?: string;
    /**
     * todo
     * @type {string}
     * @memberof ModelVersion
     */
    'publish_latest_flg'?: string;
    /**
     * todo
     * @type {string}
     * @memberof ModelVersion
     */
    'version_status'?: string;
    /**
     * todo
     * @type {string}
     * @memberof ModelVersion
     */
    'org_file_name'?: string;
    /**
     * todo
     * @type {number}
     * @memberof ModelVersion
     */
    'org_file_size'?: number;
    /**
     * todo
     * @type {string}
     * @memberof ModelVersion
     */
    'publish_file_name'?: string;
    /**
     * todo
     * @type {number}
     * @memberof ModelVersion
     */
    'publish_file_size'?: number;
    /**
     * todo
     * @type {number}
     * @memberof ModelVersion
     */
    'model_file_size'?: number;
    /**
     * todo
     * @type {string}
     * @memberof ModelVersion
     */
    'model_framework'?: string;
    /**
     * todo
     * @type {string}
     * @memberof ModelVersion
     */
    'conv_id'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof ModelVersion
     */
    'labels'?: Array<string>;
    /**
     * todo
     * @type {string}
     * @memberof ModelVersion
     */
    'stage'?: string;
    /**
     * todo
     * @type {string}
     * @memberof ModelVersion
     */
    'result'?: string;
    /**
     * 
     * @type {object}
     * @memberof ModelVersion
     */
    'kpi'?: object;
    /**
     * todo
     * @type {string}
     * @memberof ModelVersion
     */
    'convert_start_date'?: string;
    /**
     * todo
     * @type {string}
     * @memberof ModelVersion
     */
    'convert_end_date'?: string;
    /**
     * todo
     * @type {string}
     * @memberof ModelVersion
     */
    'publish_start_date'?: string;
    /**
     * todo
     * @type {string}
     * @memberof ModelVersion
     */
    'publish_end_date'?: string;
    /**
     * todo
     * @type {string}
     * @memberof ModelVersion
     */
    'version_comment'?: string;
    /**
     * todo
     * @type {string}
     * @memberof ModelVersion
     */
    'version_ins_date'?: string;
    /**
     * todo
     * @type {string}
     * @memberof ModelVersion
     */
    'version_upd_date'?: string;
}
/**
 * 
 * @export
 * @interface PublishModel200Response
 */
export interface PublishModel200Response {
    /**
     * todo
     * @type {string}
     * @memberof PublishModel200Response
     */
    'result'?: string;
    /**
     * todo
     * @type {string}
     * @memberof PublishModel200Response
     */
    'import_id'?: string;
}
/**
 * RegistCommandParameter Json Body
 * @export
 * @interface RegistCommandParameterBody
 */
export interface RegistCommandParameterBody {
    /**
     * FileName
     * @type {string}
     * @memberof RegistCommandParameterBody
     */
    'file_name': string;
    /**
     * Parameter
     * @type {string}
     * @memberof RegistCommandParameterBody
     */
    'parameter': string;
    /**
     * Comment
     * @type {string}
     * @memberof RegistCommandParameterBody
     */
    'comment'?: string;
}
/**
 * RegistCommandParameterFile Json Body
 * @export
 * @interface RegistCommandParameterFileBody
 */
export interface RegistCommandParameterFileBody {
    /**
     * Filename. Max. 100 characters.  
     * @type {string}
     * @memberof RegistCommandParameterFileBody
     */
    'file_name': string;
    /**
     * Command parameter content in base64 encoding. *See manual for detailed format
     * @type {string}
     * @memberof RegistCommandParameterFileBody
     */
    'parameter': string;
    /**
     * Comment details.
     * @type {string}
     * @memberof RegistCommandParameterFileBody
     */
    'comment'?: string;
}
/**
 * 
 * @export
 * @interface StartUploadInferenceResult200Response
 */
export interface StartUploadInferenceResult200Response {
    /**
     * todo
     * @type {string}
     * @memberof StartUploadInferenceResult200Response
     */
    'result': string;
    /**
     * todo
     * @type {string}
     * @memberof StartUploadInferenceResult200Response
     */
    'outputSubDirectory'?: string;
}
/**
 * 
 * @export
 * @interface SuccessResponse
 */
export interface SuccessResponse {
    /**
     * todo
     * @type {string}
     * @memberof SuccessResponse
     */
    'result': string;
}
/**
 * CreateProjectImageRegions API json_body class.  Attributes: ---------- regions(list): region list.
 * @export
 * @interface TrainModelCreateProjectImageRegionsDataCreateprojectimageregionsindtoJsonBody
 */
export interface TrainModelCreateProjectImageRegionsDataCreateprojectimageregionsindtoJsonBody {
    /**
     * 
     * @type {Array<object>}
     * @memberof TrainModelCreateProjectImageRegionsDataCreateprojectimageregionsindtoJsonBody
     */
    'regions'?: Array<object>;
}
/**
 * todo
 * @export
 * @interface TrainModelImportBaseModelDataImportbasemodelindtoJsonBody
 */
export interface TrainModelImportBaseModelDataImportbasemodelindtoJsonBody {
    /**
     * 
     * @type {string}
     * @memberof TrainModelImportBaseModelDataImportbasemodelindtoJsonBody
     */
    'model_id': string;
    /**
     * 
     * @type {string}
     * @memberof TrainModelImportBaseModelDataImportbasemodelindtoJsonBody
     */
    'model': string;
    /**
     * 
     * @type {boolean}
     * @memberof TrainModelImportBaseModelDataImportbasemodelindtoJsonBody
     */
    'converted'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof TrainModelImportBaseModelDataImportbasemodelindtoJsonBody
     */
    'vendor_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof TrainModelImportBaseModelDataImportbasemodelindtoJsonBody
     */
    'comment'?: string;
    /**
     * 
     * @type {string}
     * @memberof TrainModelImportBaseModelDataImportbasemodelindtoJsonBody
     */
    'input_format_param'?: string;
    /**
     * 
     * @type {string}
     * @memberof TrainModelImportBaseModelDataImportbasemodelindtoJsonBody
     */
    'network_config'?: string;
    /**
     * 
     * @type {string}
     * @memberof TrainModelImportBaseModelDataImportbasemodelindtoJsonBody
     */
    'network_type'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof TrainModelImportBaseModelDataImportbasemodelindtoJsonBody
     */
    'labels'?: Array<string>;
}
/**
 * ImportImagesFromBlobFolder API json_body class.  Attributes: ---------- tags_name(list): tag name list. folder_path(str): container folder path.
 * @export
 * @interface TrainModelImportImagesFromBlobFolderDataImportimagesfromblobfolderindtoJsonBody
 */
export interface TrainModelImportImagesFromBlobFolderDataImportimagesfromblobfolderindtoJsonBody {
    /**
     * 
     * @type {Array<any>}
     * @memberof TrainModelImportImagesFromBlobFolderDataImportimagesfromblobfolderindtoJsonBody
     */
    'tags_name'?: Array<any>;
    /**
     * 
     * @type {string}
     * @memberof TrainModelImportImagesFromBlobFolderDataImportimagesfromblobfolderindtoJsonBody
     */
    'folder_path': string;
}
/**
 * ImportImagesFromFiles API json_body class.  Attributes: ---------- tags_name(list): tag name list. images(list): images.
 * @export
 * @interface TrainModelImportImagesFromFilesDataImportimagesfromfilesindtoJsonBody
 */
export interface TrainModelImportImagesFromFilesDataImportimagesfromfilesindtoJsonBody {
    /**
     * 
     * @type {Array<any>}
     * @memberof TrainModelImportImagesFromFilesDataImportimagesfromfilesindtoJsonBody
     */
    'tags_name'?: Array<any>;
    /**
     * 
     * @type {Array<any>}
     * @memberof TrainModelImportImagesFromFilesDataImportimagesfromfilesindtoJsonBody
     */
    'images': Array<any>;
}
/**
 * ImportImagesFromScblob API json_body class.  Attributes: ---------- tags_name(list): tag name list. container_url(str): container url.
 * @export
 * @interface TrainModelImportImagesFromScblobDataImportimagesfromscblobindtoJsonBody
 */
export interface TrainModelImportImagesFromScblobDataImportimagesfromscblobindtoJsonBody {
    /**
     * 
     * @type {Array<any>}
     * @memberof TrainModelImportImagesFromScblobDataImportimagesfromscblobindtoJsonBody
     */
    'tags_name'?: Array<any>;
    /**
     * 
     * @type {string}
     * @memberof TrainModelImportImagesFromScblobDataImportimagesfromscblobindtoJsonBody
     */
    'container_url': string;
}
/**
 * todo
 * @export
 * @interface TrainModelUpdateBaseModelVersionDataUpdatebasemodelversionindtoJsonBody
 */
export interface TrainModelUpdateBaseModelVersionDataUpdatebasemodelversionindtoJsonBody {
    /**
     * 
     * @type {string}
     * @memberof TrainModelUpdateBaseModelVersionDataUpdatebasemodelversionindtoJsonBody
     */
    'comment'?: string;
    /**
     * 
     * @type {string}
     * @memberof TrainModelUpdateBaseModelVersionDataUpdatebasemodelversionindtoJsonBody
     */
    'input_format_param'?: string;
    /**
     * 
     * @type {string}
     * @memberof TrainModelUpdateBaseModelVersionDataUpdatebasemodelversionindtoJsonBody
     */
    'network_config'?: string;
}
/**
 * Update Model API json_body class.  Attributes: ---------- comment(str): comment.
 * @export
 * @interface TrainModelUpdateDeviceModelVersionDataUpdatedevicemodelversionindtoJsonBody
 */
export interface TrainModelUpdateDeviceModelVersionDataUpdatedevicemodelversionindtoJsonBody {
    /**
     * 
     * @type {string}
     * @memberof TrainModelUpdateDeviceModelVersionDataUpdatedevicemodelversionindtoJsonBody
     */
    'comment': string;
}
/**
 * UpdateProjectImageRegions API json_body class.  Attributes: ---------- folder_path(str): container folder path.
 * @export
 * @interface TrainModelUpdateProjectImageRegionsDataUpdateprojectimageregionsindtoJsonBody
 */
export interface TrainModelUpdateProjectImageRegionsDataUpdateprojectimageregionsindtoJsonBody {
    /**
     * 
     * @type {Array<object>}
     * @memberof TrainModelUpdateProjectImageRegionsDataUpdateprojectimageregionsindtoJsonBody
     */
    'regions'?: Array<object>;
    /**
     * 
     * @type {Array<object>}
     * @memberof TrainModelUpdateProjectImageRegionsDataUpdateprojectimageregionsindtoJsonBody
     */
    'region_ids'?: Array<object>;
}
/**
 * UpdateProjectTag API json_body class.  Attributes: ---------- tag_dict(str): tag dict.
 * @export
 * @interface TrainModelUpdateProjectTagDataUpdateprojecttagindtoJsonBody
 */
export interface TrainModelUpdateProjectTagDataUpdateprojecttagindtoJsonBody {
    /**
     * 
     * @type {string}
     * @memberof TrainModelUpdateProjectTagDataUpdateprojecttagindtoJsonBody
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof TrainModelUpdateProjectTagDataUpdateprojecttagindtoJsonBody
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof TrainModelUpdateProjectTagDataUpdateprojecttagindtoJsonBody
     */
    'type': string;
}
/**
 * UpdateCommandParameter Json Body
 * @export
 * @interface UpdateCommandParameterBody
 */
export interface UpdateCommandParameterBody {
    /**
     * Parameter
     * @type {string}
     * @memberof UpdateCommandParameterBody
     */
    'parameter': string;
    /**
     * Comment
     * @type {string}
     * @memberof UpdateCommandParameterBody
     */
    'comment'?: string;
}
/**
 * UpdateCommandParameterFile Json Body
 * @export
 * @interface UpdateCommandParameterFileBody
 */
export interface UpdateCommandParameterFileBody {
    /**
     * Command parameter content in base64 encoding. *See manual for detailed format
     * @type {string}
     * @memberof UpdateCommandParameterFileBody
     */
    'parameter': string;
    /**
     * Comment.
     * @type {string}
     * @memberof UpdateCommandParameterFileBody
     */
    'comment'?: string;
}
/**
 * UpdateDpsCertificate Json Body
 * @export
 * @interface UpdateDpsCertificateJsonBody
 */
export interface UpdateDpsCertificateJsonBody {
    /**
     * Primary Certificate
     * @type {string}
     * @memberof UpdateDpsCertificateJsonBody
     */
    'primary_certificate': string;
}
/**
 * 
 * @export
 * @interface ValidationError
 */
export interface ValidationError {
    /**
     * 
     * @type {Array<LocationInner>}
     * @memberof ValidationError
     */
    'loc': Array<LocationInner>;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    'msg': string;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    'type': string;
}

/**
 * CommandParameterFileApi - axios parameter creator
 * @export
 */
export const CommandParameterFileApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Apply command parameter file to device.
         * @summary ApplyCommandParameterFileToDevice
         * @param {string} fileName Filename.
         * @param {ApplyCommandParameterFileToDeviceJsonBody} applyCommandParameterFileToDeviceJsonBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        applyCommandParameterFileToDevice: async (fileName: string, applyCommandParameterFileToDeviceJsonBody: ApplyCommandParameterFileToDeviceJsonBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'fileName' is not null or undefined
            assertParamExists('applyCommandParameterFileToDevice', 'fileName', fileName)
            // verify required parameter 'applyCommandParameterFileToDeviceJsonBody' is not null or undefined
            assertParamExists('applyCommandParameterFileToDevice', 'applyCommandParameterFileToDeviceJsonBody', applyCommandParameterFileToDeviceJsonBody)
            const localVarPath = `/devices/configuration/command_parameter_files/{file_name}`
                .replace(`{${"file_name"}}`, encodeURIComponent(String(fileName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication accessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(applyCommandParameterFileToDeviceJsonBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Cancel command parameter file.
         * @summary CancelCommandParameterFile
         * @param {string} fileName Filename.
         * @param {CancelCommandParameterFileJsonBody} cancelCommandParameterFileJsonBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelCommandParameterFile: async (fileName: string, cancelCommandParameterFileJsonBody: CancelCommandParameterFileJsonBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'fileName' is not null or undefined
            assertParamExists('cancelCommandParameterFile', 'fileName', fileName)
            // verify required parameter 'cancelCommandParameterFileJsonBody' is not null or undefined
            assertParamExists('cancelCommandParameterFile', 'cancelCommandParameterFileJsonBody', cancelCommandParameterFileJsonBody)
            const localVarPath = `/devices/configuration/command_parameter_files/{file_name}`
                .replace(`{${"file_name"}}`, encodeURIComponent(String(fileName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication accessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(cancelCommandParameterFileJsonBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Command Parameter.
         * @summary GetCommandParameter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCommandParameter: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/command_parameter_files`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication accessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Register CommandParameterFile.    This API can be used to register the following API parameters in advance:   - StartUploadInferenceData API    The following are the APIs for file management and application to the device:    < Parameter file management >   - RegistCommandParameterFile API   - GetCommandParameterFile API   - UpdateCommandParameterFile API   - DeleteCommandParameterFile API    < Apply to/Cancel from device >   - ApplyCommandParameterFileToDevice API   - CancelCommandParameterFile API    If the parameter file is not applied to the device, operate using the default value.   APIs with required parameters will result in an error when the API is executed.   The default file can be specified using the following API:   - SetDefaultCommandParameterFile API
         * @summary RegistCommandParameterFile
         * @param {RegistCommandParameterFileBody} registCommandParameterFileBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registCommandParameterFile: async (registCommandParameterFileBody: RegistCommandParameterFileBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'registCommandParameterFileBody' is not null or undefined
            assertParamExists('registCommandParameterFile', 'registCommandParameterFileBody', registCommandParameterFileBody)
            const localVarPath = `/command_parameter_files`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication accessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(registCommandParameterFileBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update command parameter file.
         * @summary UpdateCommandParameterFile
         * @param {string} fileName Filename.
         * @param {UpdateCommandParameterFileBody} updateCommandParameterFileBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCommandParameterFile: async (fileName: string, updateCommandParameterFileBody: UpdateCommandParameterFileBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'fileName' is not null or undefined
            assertParamExists('updateCommandParameterFile', 'fileName', fileName)
            // verify required parameter 'updateCommandParameterFileBody' is not null or undefined
            assertParamExists('updateCommandParameterFile', 'updateCommandParameterFileBody', updateCommandParameterFileBody)
            const localVarPath = `/command_parameter_files/{file_name}`
                .replace(`{${"file_name"}}`, encodeURIComponent(String(fileName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication accessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateCommandParameterFileBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CommandParameterFileApi - functional programming interface
 * @export
 */
export const CommandParameterFileApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CommandParameterFileApiAxiosParamCreator(configuration)
    return {
        /**
         * Apply command parameter file to device.
         * @summary ApplyCommandParameterFileToDevice
         * @param {string} fileName Filename.
         * @param {ApplyCommandParameterFileToDeviceJsonBody} applyCommandParameterFileToDeviceJsonBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async applyCommandParameterFileToDevice(fileName: string, applyCommandParameterFileToDeviceJsonBody: ApplyCommandParameterFileToDeviceJsonBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.applyCommandParameterFileToDevice(fileName, applyCommandParameterFileToDeviceJsonBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Cancel command parameter file.
         * @summary CancelCommandParameterFile
         * @param {string} fileName Filename.
         * @param {CancelCommandParameterFileJsonBody} cancelCommandParameterFileJsonBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cancelCommandParameterFile(fileName: string, cancelCommandParameterFileJsonBody: CancelCommandParameterFileJsonBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cancelCommandParameterFile(fileName, cancelCommandParameterFileJsonBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get Command Parameter.
         * @summary GetCommandParameter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCommandParameter(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetCommandParameter200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCommandParameter(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Register CommandParameterFile.    This API can be used to register the following API parameters in advance:   - StartUploadInferenceData API    The following are the APIs for file management and application to the device:    < Parameter file management >   - RegistCommandParameterFile API   - GetCommandParameterFile API   - UpdateCommandParameterFile API   - DeleteCommandParameterFile API    < Apply to/Cancel from device >   - ApplyCommandParameterFileToDevice API   - CancelCommandParameterFile API    If the parameter file is not applied to the device, operate using the default value.   APIs with required parameters will result in an error when the API is executed.   The default file can be specified using the following API:   - SetDefaultCommandParameterFile API
         * @summary RegistCommandParameterFile
         * @param {RegistCommandParameterFileBody} registCommandParameterFileBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async registCommandParameterFile(registCommandParameterFileBody: RegistCommandParameterFileBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.registCommandParameterFile(registCommandParameterFileBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update command parameter file.
         * @summary UpdateCommandParameterFile
         * @param {string} fileName Filename.
         * @param {UpdateCommandParameterFileBody} updateCommandParameterFileBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateCommandParameterFile(fileName: string, updateCommandParameterFileBody: UpdateCommandParameterFileBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateCommandParameterFile(fileName, updateCommandParameterFileBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CommandParameterFileApi - factory interface
 * @export
 */
export const CommandParameterFileApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CommandParameterFileApiFp(configuration)
    return {
        /**
         * Apply command parameter file to device.
         * @summary ApplyCommandParameterFileToDevice
         * @param {string} fileName Filename.
         * @param {ApplyCommandParameterFileToDeviceJsonBody} applyCommandParameterFileToDeviceJsonBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        applyCommandParameterFileToDevice(fileName: string, applyCommandParameterFileToDeviceJsonBody: ApplyCommandParameterFileToDeviceJsonBody, options?: any): AxiosPromise<SuccessResponse> {
            return localVarFp.applyCommandParameterFileToDevice(fileName, applyCommandParameterFileToDeviceJsonBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Cancel command parameter file.
         * @summary CancelCommandParameterFile
         * @param {string} fileName Filename.
         * @param {CancelCommandParameterFileJsonBody} cancelCommandParameterFileJsonBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelCommandParameterFile(fileName: string, cancelCommandParameterFileJsonBody: CancelCommandParameterFileJsonBody, options?: any): AxiosPromise<SuccessResponse> {
            return localVarFp.cancelCommandParameterFile(fileName, cancelCommandParameterFileJsonBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Command Parameter.
         * @summary GetCommandParameter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCommandParameter(options?: any): AxiosPromise<GetCommandParameter200Response> {
            return localVarFp.getCommandParameter(options).then((request) => request(axios, basePath));
        },
        /**
         * Register CommandParameterFile.    This API can be used to register the following API parameters in advance:   - StartUploadInferenceData API    The following are the APIs for file management and application to the device:    < Parameter file management >   - RegistCommandParameterFile API   - GetCommandParameterFile API   - UpdateCommandParameterFile API   - DeleteCommandParameterFile API    < Apply to/Cancel from device >   - ApplyCommandParameterFileToDevice API   - CancelCommandParameterFile API    If the parameter file is not applied to the device, operate using the default value.   APIs with required parameters will result in an error when the API is executed.   The default file can be specified using the following API:   - SetDefaultCommandParameterFile API
         * @summary RegistCommandParameterFile
         * @param {RegistCommandParameterFileBody} registCommandParameterFileBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registCommandParameterFile(registCommandParameterFileBody: RegistCommandParameterFileBody, options?: any): AxiosPromise<SuccessResponse> {
            return localVarFp.registCommandParameterFile(registCommandParameterFileBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Update command parameter file.
         * @summary UpdateCommandParameterFile
         * @param {string} fileName Filename.
         * @param {UpdateCommandParameterFileBody} updateCommandParameterFileBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCommandParameterFile(fileName: string, updateCommandParameterFileBody: UpdateCommandParameterFileBody, options?: any): AxiosPromise<SuccessResponse> {
            return localVarFp.updateCommandParameterFile(fileName, updateCommandParameterFileBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CommandParameterFileApi - object-oriented interface
 * @export
 * @class CommandParameterFileApi
 * @extends {BaseAPI}
 */
export class CommandParameterFileApi extends BaseAPI {
    /**
     * Apply command parameter file to device.
     * @summary ApplyCommandParameterFileToDevice
     * @param {string} fileName Filename.
     * @param {ApplyCommandParameterFileToDeviceJsonBody} applyCommandParameterFileToDeviceJsonBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommandParameterFileApi
     */
    public applyCommandParameterFileToDevice(fileName: string, applyCommandParameterFileToDeviceJsonBody: ApplyCommandParameterFileToDeviceJsonBody, options?: AxiosRequestConfig) {
        return CommandParameterFileApiFp(this.configuration).applyCommandParameterFileToDevice(fileName, applyCommandParameterFileToDeviceJsonBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Cancel command parameter file.
     * @summary CancelCommandParameterFile
     * @param {string} fileName Filename.
     * @param {CancelCommandParameterFileJsonBody} cancelCommandParameterFileJsonBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommandParameterFileApi
     */
    public cancelCommandParameterFile(fileName: string, cancelCommandParameterFileJsonBody: CancelCommandParameterFileJsonBody, options?: AxiosRequestConfig) {
        return CommandParameterFileApiFp(this.configuration).cancelCommandParameterFile(fileName, cancelCommandParameterFileJsonBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Command Parameter.
     * @summary GetCommandParameter
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommandParameterFileApi
     */
    public getCommandParameter(options?: AxiosRequestConfig) {
        return CommandParameterFileApiFp(this.configuration).getCommandParameter(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Register CommandParameterFile.    This API can be used to register the following API parameters in advance:   - StartUploadInferenceData API    The following are the APIs for file management and application to the device:    < Parameter file management >   - RegistCommandParameterFile API   - GetCommandParameterFile API   - UpdateCommandParameterFile API   - DeleteCommandParameterFile API    < Apply to/Cancel from device >   - ApplyCommandParameterFileToDevice API   - CancelCommandParameterFile API    If the parameter file is not applied to the device, operate using the default value.   APIs with required parameters will result in an error when the API is executed.   The default file can be specified using the following API:   - SetDefaultCommandParameterFile API
     * @summary RegistCommandParameterFile
     * @param {RegistCommandParameterFileBody} registCommandParameterFileBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommandParameterFileApi
     */
    public registCommandParameterFile(registCommandParameterFileBody: RegistCommandParameterFileBody, options?: AxiosRequestConfig) {
        return CommandParameterFileApiFp(this.configuration).registCommandParameterFile(registCommandParameterFileBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update command parameter file.
     * @summary UpdateCommandParameterFile
     * @param {string} fileName Filename.
     * @param {UpdateCommandParameterFileBody} updateCommandParameterFileBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommandParameterFileApi
     */
    public updateCommandParameterFile(fileName: string, updateCommandParameterFileBody: UpdateCommandParameterFileBody, options?: AxiosRequestConfig) {
        return CommandParameterFileApiFp(this.configuration).updateCommandParameterFile(fileName, updateCommandParameterFileBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * DeployApi - axios parameter creator
 * @export
 */
export const DeployApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Cancel_Deployment .
         * @summary CancelDeployment
         * @param {string} deviceId Device Id
         * @param {string} deployId Deploy Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelDeployment: async (deviceId: string, deployId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'deviceId' is not null or undefined
            assertParamExists('cancelDeployment', 'deviceId', deviceId)
            // verify required parameter 'deployId' is not null or undefined
            assertParamExists('cancelDeployment', 'deployId', deployId)
            const localVarPath = `/devices/{device_id}/deploys/{deploy_id}`
                .replace(`{${"device_id"}}`, encodeURIComponent(String(deviceId)))
                .replace(`{${"deploy_id"}}`, encodeURIComponent(String(deployId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication accessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create Deploy Configuration.
         * @summary CreateDeployConfiguration
         * @param {string} configId Config ID
         * @param {string} [comment] Comment
         * @param {string} [sensorLoaderVersionNumber] Sensor loader version number
         * @param {string} [sensorVersionNumber] Sensor version number
         * @param {string} [modelId] Model id
         * @param {string} [modelVersionNumber] Model version number
         * @param {string} [apFwVersionNumber] Ap fw version number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDeployConfiguration: async (configId: string, comment?: string, sensorLoaderVersionNumber?: string, sensorVersionNumber?: string, modelId?: string, modelVersionNumber?: string, apFwVersionNumber?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'configId' is not null or undefined
            assertParamExists('createDeployConfiguration', 'configId', configId)
            const localVarPath = `/deployconfigurations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication accessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (configId !== undefined) {
                localVarQueryParameter['config_id'] = configId;
            }

            if (comment !== undefined) {
                localVarQueryParameter['comment'] = comment;
            }

            if (sensorLoaderVersionNumber !== undefined) {
                localVarQueryParameter['sensor_loader_version_number'] = sensorLoaderVersionNumber;
            }

            if (sensorVersionNumber !== undefined) {
                localVarQueryParameter['sensor_version_number'] = sensorVersionNumber;
            }

            if (modelId !== undefined) {
                localVarQueryParameter['model_id'] = modelId;
            }

            if (modelVersionNumber !== undefined) {
                localVarQueryParameter['model_version_number'] = modelVersionNumber;
            }

            if (apFwVersionNumber !== undefined) {
                localVarQueryParameter['ap_fw_version_number'] = apFwVersionNumber;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete Deploy Configuration.
         * @summary DeleteDeployConfiguration
         * @param {string} configId Config ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDeployConfiguration: async (configId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'configId' is not null or undefined
            assertParamExists('deleteDeployConfiguration', 'configId', configId)
            const localVarPath = `/deployconfigurations/{config_id}`
                .replace(`{${"config_id"}}`, encodeURIComponent(String(configId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication accessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deploy By Configuration.
         * @summary DeployByConfiguration
         * @param {string} configId Config Id
         * @param {string} deviceIds Device Ids
         * @param {string} [replaceModelId] Replace Model Id
         * @param {string} [comment] Comment
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deployByConfiguration: async (configId: string, deviceIds: string, replaceModelId?: string, comment?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'configId' is not null or undefined
            assertParamExists('deployByConfiguration', 'configId', configId)
            // verify required parameter 'deviceIds' is not null or undefined
            assertParamExists('deployByConfiguration', 'deviceIds', deviceIds)
            const localVarPath = `/deployconfigurations/{config_id}`
                .replace(`{${"config_id"}}`, encodeURIComponent(String(configId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication accessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (deviceIds !== undefined) {
                localVarQueryParameter['device_ids'] = deviceIds;
            }

            if (replaceModelId !== undefined) {
                localVarQueryParameter['replace_model_id'] = replaceModelId;
            }

            if (comment !== undefined) {
                localVarQueryParameter['comment'] = comment;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Deploy Configurations.
         * @summary GetDeployConfigurations
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDeployConfigurations: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/deployconfigurations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication accessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Deploy History.
         * @summary GetDeployHistory
         * @param {string} deviceId Device Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDeployHistory: async (deviceId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'deviceId' is not null or undefined
            assertParamExists('getDeployHistory', 'deviceId', deviceId)
            const localVarPath = `/devices/{device_id}/deploys`
                .replace(`{${"device_id"}}`, encodeURIComponent(String(deviceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication accessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DeployApi - functional programming interface
 * @export
 */
export const DeployApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DeployApiAxiosParamCreator(configuration)
    return {
        /**
         * Cancel_Deployment .
         * @summary CancelDeployment
         * @param {string} deviceId Device Id
         * @param {string} deployId Deploy Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cancelDeployment(deviceId: string, deployId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cancelDeployment(deviceId, deployId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create Deploy Configuration.
         * @summary CreateDeployConfiguration
         * @param {string} configId Config ID
         * @param {string} [comment] Comment
         * @param {string} [sensorLoaderVersionNumber] Sensor loader version number
         * @param {string} [sensorVersionNumber] Sensor version number
         * @param {string} [modelId] Model id
         * @param {string} [modelVersionNumber] Model version number
         * @param {string} [apFwVersionNumber] Ap fw version number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createDeployConfiguration(configId: string, comment?: string, sensorLoaderVersionNumber?: string, sensorVersionNumber?: string, modelId?: string, modelVersionNumber?: string, apFwVersionNumber?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createDeployConfiguration(configId, comment, sensorLoaderVersionNumber, sensorVersionNumber, modelId, modelVersionNumber, apFwVersionNumber, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete Deploy Configuration.
         * @summary DeleteDeployConfiguration
         * @param {string} configId Config ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteDeployConfiguration(configId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteDeployConfiguration(configId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Deploy By Configuration.
         * @summary DeployByConfiguration
         * @param {string} configId Config Id
         * @param {string} deviceIds Device Ids
         * @param {string} [replaceModelId] Replace Model Id
         * @param {string} [comment] Comment
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deployByConfiguration(configId: string, deviceIds: string, replaceModelId?: string, comment?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deployByConfiguration(configId, deviceIds, replaceModelId, comment, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get Deploy Configurations.
         * @summary GetDeployConfigurations
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDeployConfigurations(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetDeployConfigurations200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDeployConfigurations(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get Deploy History.
         * @summary GetDeployHistory
         * @param {string} deviceId Device Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDeployHistory(deviceId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetDeployHistory200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDeployHistory(deviceId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DeployApi - factory interface
 * @export
 */
export const DeployApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DeployApiFp(configuration)
    return {
        /**
         * Cancel_Deployment .
         * @summary CancelDeployment
         * @param {string} deviceId Device Id
         * @param {string} deployId Deploy Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelDeployment(deviceId: string, deployId: string, options?: any): AxiosPromise<SuccessResponse> {
            return localVarFp.cancelDeployment(deviceId, deployId, options).then((request) => request(axios, basePath));
        },
        /**
         * Create Deploy Configuration.
         * @summary CreateDeployConfiguration
         * @param {string} configId Config ID
         * @param {string} [comment] Comment
         * @param {string} [sensorLoaderVersionNumber] Sensor loader version number
         * @param {string} [sensorVersionNumber] Sensor version number
         * @param {string} [modelId] Model id
         * @param {string} [modelVersionNumber] Model version number
         * @param {string} [apFwVersionNumber] Ap fw version number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDeployConfiguration(configId: string, comment?: string, sensorLoaderVersionNumber?: string, sensorVersionNumber?: string, modelId?: string, modelVersionNumber?: string, apFwVersionNumber?: string, options?: any): AxiosPromise<SuccessResponse> {
            return localVarFp.createDeployConfiguration(configId, comment, sensorLoaderVersionNumber, sensorVersionNumber, modelId, modelVersionNumber, apFwVersionNumber, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete Deploy Configuration.
         * @summary DeleteDeployConfiguration
         * @param {string} configId Config ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDeployConfiguration(configId: string, options?: any): AxiosPromise<SuccessResponse> {
            return localVarFp.deleteDeployConfiguration(configId, options).then((request) => request(axios, basePath));
        },
        /**
         * Deploy By Configuration.
         * @summary DeployByConfiguration
         * @param {string} configId Config Id
         * @param {string} deviceIds Device Ids
         * @param {string} [replaceModelId] Replace Model Id
         * @param {string} [comment] Comment
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deployByConfiguration(configId: string, deviceIds: string, replaceModelId?: string, comment?: string, options?: any): AxiosPromise<SuccessResponse> {
            return localVarFp.deployByConfiguration(configId, deviceIds, replaceModelId, comment, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Deploy Configurations.
         * @summary GetDeployConfigurations
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDeployConfigurations(options?: any): AxiosPromise<GetDeployConfigurations200Response> {
            return localVarFp.getDeployConfigurations(options).then((request) => request(axios, basePath));
        },
        /**
         * Get Deploy History.
         * @summary GetDeployHistory
         * @param {string} deviceId Device Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDeployHistory(deviceId: string, options?: any): AxiosPromise<GetDeployHistory200Response> {
            return localVarFp.getDeployHistory(deviceId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DeployApi - object-oriented interface
 * @export
 * @class DeployApi
 * @extends {BaseAPI}
 */
export class DeployApi extends BaseAPI {
    /**
     * Cancel_Deployment .
     * @summary CancelDeployment
     * @param {string} deviceId Device Id
     * @param {string} deployId Deploy Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeployApi
     */
    public cancelDeployment(deviceId: string, deployId: string, options?: AxiosRequestConfig) {
        return DeployApiFp(this.configuration).cancelDeployment(deviceId, deployId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create Deploy Configuration.
     * @summary CreateDeployConfiguration
     * @param {string} configId Config ID
     * @param {string} [comment] Comment
     * @param {string} [sensorLoaderVersionNumber] Sensor loader version number
     * @param {string} [sensorVersionNumber] Sensor version number
     * @param {string} [modelId] Model id
     * @param {string} [modelVersionNumber] Model version number
     * @param {string} [apFwVersionNumber] Ap fw version number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeployApi
     */
    public createDeployConfiguration(configId: string, comment?: string, sensorLoaderVersionNumber?: string, sensorVersionNumber?: string, modelId?: string, modelVersionNumber?: string, apFwVersionNumber?: string, options?: AxiosRequestConfig) {
        return DeployApiFp(this.configuration).createDeployConfiguration(configId, comment, sensorLoaderVersionNumber, sensorVersionNumber, modelId, modelVersionNumber, apFwVersionNumber, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete Deploy Configuration.
     * @summary DeleteDeployConfiguration
     * @param {string} configId Config ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeployApi
     */
    public deleteDeployConfiguration(configId: string, options?: AxiosRequestConfig) {
        return DeployApiFp(this.configuration).deleteDeployConfiguration(configId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deploy By Configuration.
     * @summary DeployByConfiguration
     * @param {string} configId Config Id
     * @param {string} deviceIds Device Ids
     * @param {string} [replaceModelId] Replace Model Id
     * @param {string} [comment] Comment
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeployApi
     */
    public deployByConfiguration(configId: string, deviceIds: string, replaceModelId?: string, comment?: string, options?: AxiosRequestConfig) {
        return DeployApiFp(this.configuration).deployByConfiguration(configId, deviceIds, replaceModelId, comment, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Deploy Configurations.
     * @summary GetDeployConfigurations
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeployApi
     */
    public getDeployConfigurations(options?: AxiosRequestConfig) {
        return DeployApiFp(this.configuration).getDeployConfigurations(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Deploy History.
     * @summary GetDeployHistory
     * @param {string} deviceId Device Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeployApi
     */
    public getDeployHistory(deviceId: string, options?: AxiosRequestConfig) {
        return DeployApiFp(this.configuration).getDeployHistory(deviceId, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * DeviceAppApi - axios parameter creator
 * @export
 */
export const DeviceAppApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Delete device app.
         * @summary DeleteDeviceApp
         * @param {string} appName App name
         * @param {string} versionNumber App version number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDeviceApp: async (appName: string, versionNumber: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'appName' is not null or undefined
            assertParamExists('deleteDeviceApp', 'appName', appName)
            // verify required parameter 'versionNumber' is not null or undefined
            assertParamExists('deleteDeviceApp', 'versionNumber', versionNumber)
            const localVarPath = `/device_apps/{app_name}/{version_number}`
                .replace(`{${"app_name"}}`, encodeURIComponent(String(appName)))
                .replace(`{${"version_number"}}`, encodeURIComponent(String(versionNumber)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication accessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deploy device app.
         * @summary DeployDeviceApp
         * @param {DeployDeviceAppJsonBody} deployDeviceAppJsonBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deployDeviceApp: async (deployDeviceAppJsonBody: DeployDeviceAppJsonBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'deployDeviceAppJsonBody' is not null or undefined
            assertParamExists('deployDeviceApp', 'deployDeviceAppJsonBody', deployDeviceAppJsonBody)
            const localVarPath = `/device_apps_deploys`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication accessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deployDeviceAppJsonBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Device App Deploys.
         * @summary GetDeviceAppDeploys
         * @param {string} appName App name
         * @param {string} versionNumber App version number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDeviceAppDeploys: async (appName: string, versionNumber: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'appName' is not null or undefined
            assertParamExists('getDeviceAppDeploys', 'appName', appName)
            // verify required parameter 'versionNumber' is not null or undefined
            assertParamExists('getDeviceAppDeploys', 'versionNumber', versionNumber)
            const localVarPath = `/device_apps/{app_name}/{version_number}/deploys`
                .replace(`{${"app_name"}}`, encodeURIComponent(String(appName)))
                .replace(`{${"version_number"}}`, encodeURIComponent(String(versionNumber)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication accessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get device apps.
         * @summary GetDeviceApps
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDeviceApps: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/device_apps`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication accessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Import Device app.
         * @summary ImportDeviceApp
         * @param {ImportDeviceAppJsonBody} importDeviceAppJsonBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        importDeviceApp: async (importDeviceAppJsonBody: ImportDeviceAppJsonBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'importDeviceAppJsonBody' is not null or undefined
            assertParamExists('importDeviceApp', 'importDeviceAppJsonBody', importDeviceAppJsonBody)
            const localVarPath = `/device_apps`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication accessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(importDeviceAppJsonBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Undeploy device app.
         * @summary UndeployDeviceApp
         * @param {string} deviceIds Device IDs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        undeployDeviceApp: async (deviceIds: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'deviceIds' is not null or undefined
            assertParamExists('undeployDeviceApp', 'deviceIds', deviceIds)
            const localVarPath = `/device_apps_deploys`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication accessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (deviceIds !== undefined) {
                localVarQueryParameter['device_ids'] = deviceIds;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DeviceAppApi - functional programming interface
 * @export
 */
export const DeviceAppApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DeviceAppApiAxiosParamCreator(configuration)
    return {
        /**
         * Delete device app.
         * @summary DeleteDeviceApp
         * @param {string} appName App name
         * @param {string} versionNumber App version number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteDeviceApp(appName: string, versionNumber: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteDeviceApp(appName, versionNumber, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Deploy device app.
         * @summary DeployDeviceApp
         * @param {DeployDeviceAppJsonBody} deployDeviceAppJsonBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deployDeviceApp(deployDeviceAppJsonBody: DeployDeviceAppJsonBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deployDeviceApp(deployDeviceAppJsonBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get Device App Deploys.
         * @summary GetDeviceAppDeploys
         * @param {string} appName App name
         * @param {string} versionNumber App version number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDeviceAppDeploys(appName: string, versionNumber: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetDeviceAppDeploys200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDeviceAppDeploys(appName, versionNumber, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get device apps.
         * @summary GetDeviceApps
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDeviceApps(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetDeviceApps200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDeviceApps(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Import Device app.
         * @summary ImportDeviceApp
         * @param {ImportDeviceAppJsonBody} importDeviceAppJsonBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async importDeviceApp(importDeviceAppJsonBody: ImportDeviceAppJsonBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.importDeviceApp(importDeviceAppJsonBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Undeploy device app.
         * @summary UndeployDeviceApp
         * @param {string} deviceIds Device IDs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async undeployDeviceApp(deviceIds: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.undeployDeviceApp(deviceIds, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DeviceAppApi - factory interface
 * @export
 */
export const DeviceAppApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DeviceAppApiFp(configuration)
    return {
        /**
         * Delete device app.
         * @summary DeleteDeviceApp
         * @param {string} appName App name
         * @param {string} versionNumber App version number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDeviceApp(appName: string, versionNumber: string, options?: any): AxiosPromise<SuccessResponse> {
            return localVarFp.deleteDeviceApp(appName, versionNumber, options).then((request) => request(axios, basePath));
        },
        /**
         * Deploy device app.
         * @summary DeployDeviceApp
         * @param {DeployDeviceAppJsonBody} deployDeviceAppJsonBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deployDeviceApp(deployDeviceAppJsonBody: DeployDeviceAppJsonBody, options?: any): AxiosPromise<SuccessResponse> {
            return localVarFp.deployDeviceApp(deployDeviceAppJsonBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Device App Deploys.
         * @summary GetDeviceAppDeploys
         * @param {string} appName App name
         * @param {string} versionNumber App version number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDeviceAppDeploys(appName: string, versionNumber: string, options?: any): AxiosPromise<GetDeviceAppDeploys200Response> {
            return localVarFp.getDeviceAppDeploys(appName, versionNumber, options).then((request) => request(axios, basePath));
        },
        /**
         * Get device apps.
         * @summary GetDeviceApps
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDeviceApps(options?: any): AxiosPromise<GetDeviceApps200Response> {
            return localVarFp.getDeviceApps(options).then((request) => request(axios, basePath));
        },
        /**
         * Import Device app.
         * @summary ImportDeviceApp
         * @param {ImportDeviceAppJsonBody} importDeviceAppJsonBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        importDeviceApp(importDeviceAppJsonBody: ImportDeviceAppJsonBody, options?: any): AxiosPromise<SuccessResponse> {
            return localVarFp.importDeviceApp(importDeviceAppJsonBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Undeploy device app.
         * @summary UndeployDeviceApp
         * @param {string} deviceIds Device IDs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        undeployDeviceApp(deviceIds: string, options?: any): AxiosPromise<SuccessResponse> {
            return localVarFp.undeployDeviceApp(deviceIds, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DeviceAppApi - object-oriented interface
 * @export
 * @class DeviceAppApi
 * @extends {BaseAPI}
 */
export class DeviceAppApi extends BaseAPI {
    /**
     * Delete device app.
     * @summary DeleteDeviceApp
     * @param {string} appName App name
     * @param {string} versionNumber App version number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceAppApi
     */
    public deleteDeviceApp(appName: string, versionNumber: string, options?: AxiosRequestConfig) {
        return DeviceAppApiFp(this.configuration).deleteDeviceApp(appName, versionNumber, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deploy device app.
     * @summary DeployDeviceApp
     * @param {DeployDeviceAppJsonBody} deployDeviceAppJsonBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceAppApi
     */
    public deployDeviceApp(deployDeviceAppJsonBody: DeployDeviceAppJsonBody, options?: AxiosRequestConfig) {
        return DeviceAppApiFp(this.configuration).deployDeviceApp(deployDeviceAppJsonBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Device App Deploys.
     * @summary GetDeviceAppDeploys
     * @param {string} appName App name
     * @param {string} versionNumber App version number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceAppApi
     */
    public getDeviceAppDeploys(appName: string, versionNumber: string, options?: AxiosRequestConfig) {
        return DeviceAppApiFp(this.configuration).getDeviceAppDeploys(appName, versionNumber, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get device apps.
     * @summary GetDeviceApps
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceAppApi
     */
    public getDeviceApps(options?: AxiosRequestConfig) {
        return DeviceAppApiFp(this.configuration).getDeviceApps(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Import Device app.
     * @summary ImportDeviceApp
     * @param {ImportDeviceAppJsonBody} importDeviceAppJsonBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceAppApi
     */
    public importDeviceApp(importDeviceAppJsonBody: ImportDeviceAppJsonBody, options?: AxiosRequestConfig) {
        return DeviceAppApiFp(this.configuration).importDeviceApp(importDeviceAppJsonBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Undeploy device app.
     * @summary UndeployDeviceApp
     * @param {string} deviceIds Device IDs
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceAppApi
     */
    public undeployDeviceApp(deviceIds: string, options?: AxiosRequestConfig) {
        return DeviceAppApiFp(this.configuration).undeployDeviceApp(deviceIds, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * DeviceCommandApi - axios parameter creator
 * @export
 */
export const DeviceCommandApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Start Upload Inference Result.
         * @summary StartUploadInferenceResult
         * @param {string} deviceId Device Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        startUploadInferenceResult: async (deviceId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'deviceId' is not null or undefined
            assertParamExists('startUploadInferenceResult', 'deviceId', deviceId)
            const localVarPath = `/devices/{device_id}/inferenceresults/collectstart`
                .replace(`{${"device_id"}}`, encodeURIComponent(String(deviceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication accessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Stop Upload Inference Result.
         * @summary StopUploadInferenceResult
         * @param {string} deviceId Device Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stopUploadInferenceResult: async (deviceId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'deviceId' is not null or undefined
            assertParamExists('stopUploadInferenceResult', 'deviceId', deviceId)
            const localVarPath = `/devices/{device_id}/inferenceresults/collectstop`
                .replace(`{${"device_id"}}`, encodeURIComponent(String(deviceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication accessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DeviceCommandApi - functional programming interface
 * @export
 */
export const DeviceCommandApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DeviceCommandApiAxiosParamCreator(configuration)
    return {
        /**
         * Start Upload Inference Result.
         * @summary StartUploadInferenceResult
         * @param {string} deviceId Device Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async startUploadInferenceResult(deviceId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StartUploadInferenceResult200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.startUploadInferenceResult(deviceId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Stop Upload Inference Result.
         * @summary StopUploadInferenceResult
         * @param {string} deviceId Device Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async stopUploadInferenceResult(deviceId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.stopUploadInferenceResult(deviceId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DeviceCommandApi - factory interface
 * @export
 */
export const DeviceCommandApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DeviceCommandApiFp(configuration)
    return {
        /**
         * Start Upload Inference Result.
         * @summary StartUploadInferenceResult
         * @param {string} deviceId Device Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        startUploadInferenceResult(deviceId: string, options?: any): AxiosPromise<StartUploadInferenceResult200Response> {
            return localVarFp.startUploadInferenceResult(deviceId, options).then((request) => request(axios, basePath));
        },
        /**
         * Stop Upload Inference Result.
         * @summary StopUploadInferenceResult
         * @param {string} deviceId Device Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stopUploadInferenceResult(deviceId: string, options?: any): AxiosPromise<SuccessResponse> {
            return localVarFp.stopUploadInferenceResult(deviceId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DeviceCommandApi - object-oriented interface
 * @export
 * @class DeviceCommandApi
 * @extends {BaseAPI}
 */
export class DeviceCommandApi extends BaseAPI {
    /**
     * Start Upload Inference Result.
     * @summary StartUploadInferenceResult
     * @param {string} deviceId Device Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceCommandApi
     */
    public startUploadInferenceResult(deviceId: string, options?: AxiosRequestConfig) {
        return DeviceCommandApiFp(this.configuration).startUploadInferenceResult(deviceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Stop Upload Inference Result.
     * @summary StopUploadInferenceResult
     * @param {string} deviceId Device Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceCommandApi
     */
    public stopUploadInferenceResult(deviceId: string, options?: AxiosRequestConfig) {
        return DeviceCommandApiFp(this.configuration).stopUploadInferenceResult(deviceId, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * InsightApi - axios parameter creator
 * @export
 */
export const InsightApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Export Images.
         * @summary ExportImages
         * @param {string} key Key
         * @param {string} [fromDatetime] From Datetime
         * @param {string} [toDatetime] To Datetime
         * @param {string} [deviceId] Device Id
         * @param {string} [fileFormat] File Format
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exportImages: async (key: string, fromDatetime?: string, toDatetime?: string, deviceId?: string, fileFormat?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'key' is not null or undefined
            assertParamExists('exportImages', 'key', key)
            const localVarPath = `/devices/images/export`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication accessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (key !== undefined) {
                localVarQueryParameter['key'] = key;
            }

            if (fromDatetime !== undefined) {
                localVarQueryParameter['from_datetime'] = fromDatetime;
            }

            if (toDatetime !== undefined) {
                localVarQueryParameter['to_datetime'] = toDatetime;
            }

            if (deviceId !== undefined) {
                localVarQueryParameter['device_id'] = deviceId;
            }

            if (fileFormat !== undefined) {
                localVarQueryParameter['file_format'] = fileFormat;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Image Directories.
         * @summary GetImageDirectories
         * @param {string} [deviceId] Device Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getImageDirectories: async (deviceId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/devices/images/directories`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication accessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (deviceId !== undefined) {
                localVarQueryParameter['device_id'] = deviceId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Images.
         * @summary GetImages
         * @param {string} deviceId Device Id
         * @param {string} subDirectoryName Sub Directory Name
         * @param {string} [orderBy] Order By (DESC or ASC)
         * @param {number} [numberOfImages] Number Of Images (0～256)
         * @param {number} [skip] Skip
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getImages: async (deviceId: string, subDirectoryName: string, orderBy?: string, numberOfImages?: number, skip?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'deviceId' is not null or undefined
            assertParamExists('getImages', 'deviceId', deviceId)
            // verify required parameter 'subDirectoryName' is not null or undefined
            assertParamExists('getImages', 'subDirectoryName', subDirectoryName)
            const localVarPath = `/devices/{device_id}/images/directories/{sub_directory_name}`
                .replace(`{${"device_id"}}`, encodeURIComponent(String(deviceId)))
                .replace(`{${"sub_directory_name"}}`, encodeURIComponent(String(subDirectoryName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication accessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (numberOfImages !== undefined) {
                localVarQueryParameter['number_of_images'] = numberOfImages;
            }

            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Inference Results.
         * @summary GetInferenceResults
         * @param {string} deviceId Device Id
         * @param {number} [numberOfInferenceresults] NumberOfInferenceresults
         * @param {string} [filter] Filter
         * @param {number} [raw] Raw (0 or 1)
         * @param {string} [time] Time
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInferenceResults: async (deviceId: string, numberOfInferenceresults?: number, filter?: string, raw?: number, time?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'deviceId' is not null or undefined
            assertParamExists('getInferenceResults', 'deviceId', deviceId)
            const localVarPath = `/devices/{device_id}/inferenceresults`
                .replace(`{${"device_id"}}`, encodeURIComponent(String(deviceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication accessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (numberOfInferenceresults !== undefined) {
                localVarQueryParameter['NumberOfInferenceresults'] = numberOfInferenceresults;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (raw !== undefined) {
                localVarQueryParameter['raw'] = raw;
            }

            if (time !== undefined) {
                localVarQueryParameter['time'] = time;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * InsightApi - functional programming interface
 * @export
 */
export const InsightApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = InsightApiAxiosParamCreator(configuration)
    return {
        /**
         * Export Images.
         * @summary ExportImages
         * @param {string} key Key
         * @param {string} [fromDatetime] From Datetime
         * @param {string} [toDatetime] To Datetime
         * @param {string} [deviceId] Device Id
         * @param {string} [fileFormat] File Format
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async exportImages(key: string, fromDatetime?: string, toDatetime?: string, deviceId?: string, fileFormat?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExportImages200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.exportImages(key, fromDatetime, toDatetime, deviceId, fileFormat, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get Image Directories.
         * @summary GetImageDirectories
         * @param {string} [deviceId] Device Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getImageDirectories(deviceId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetImageDirectories200ResponseInner>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getImageDirectories(deviceId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get Images.
         * @summary GetImages
         * @param {string} deviceId Device Id
         * @param {string} subDirectoryName Sub Directory Name
         * @param {string} [orderBy] Order By (DESC or ASC)
         * @param {number} [numberOfImages] Number Of Images (0～256)
         * @param {number} [skip] Skip
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getImages(deviceId: string, subDirectoryName: string, orderBy?: string, numberOfImages?: number, skip?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetImages200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getImages(deviceId, subDirectoryName, orderBy, numberOfImages, skip, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get Inference Results.
         * @summary GetInferenceResults
         * @param {string} deviceId Device Id
         * @param {number} [numberOfInferenceresults] NumberOfInferenceresults
         * @param {string} [filter] Filter
         * @param {number} [raw] Raw (0 or 1)
         * @param {string} [time] Time
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getInferenceResults(deviceId: string, numberOfInferenceresults?: number, filter?: string, raw?: number, time?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetInferenceResults200ResponseInner>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getInferenceResults(deviceId, numberOfInferenceresults, filter, raw, time, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * InsightApi - factory interface
 * @export
 */
export const InsightApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = InsightApiFp(configuration)
    return {
        /**
         * Export Images.
         * @summary ExportImages
         * @param {string} key Key
         * @param {string} [fromDatetime] From Datetime
         * @param {string} [toDatetime] To Datetime
         * @param {string} [deviceId] Device Id
         * @param {string} [fileFormat] File Format
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exportImages(key: string, fromDatetime?: string, toDatetime?: string, deviceId?: string, fileFormat?: string, options?: any): AxiosPromise<ExportImages200Response> {
            return localVarFp.exportImages(key, fromDatetime, toDatetime, deviceId, fileFormat, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Image Directories.
         * @summary GetImageDirectories
         * @param {string} [deviceId] Device Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getImageDirectories(deviceId?: string, options?: any): AxiosPromise<Array<GetImageDirectories200ResponseInner>> {
            return localVarFp.getImageDirectories(deviceId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Images.
         * @summary GetImages
         * @param {string} deviceId Device Id
         * @param {string} subDirectoryName Sub Directory Name
         * @param {string} [orderBy] Order By (DESC or ASC)
         * @param {number} [numberOfImages] Number Of Images (0～256)
         * @param {number} [skip] Skip
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getImages(deviceId: string, subDirectoryName: string, orderBy?: string, numberOfImages?: number, skip?: number, options?: any): AxiosPromise<GetImages200Response> {
            return localVarFp.getImages(deviceId, subDirectoryName, orderBy, numberOfImages, skip, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Inference Results.
         * @summary GetInferenceResults
         * @param {string} deviceId Device Id
         * @param {number} [numberOfInferenceresults] NumberOfInferenceresults
         * @param {string} [filter] Filter
         * @param {number} [raw] Raw (0 or 1)
         * @param {string} [time] Time
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInferenceResults(deviceId: string, numberOfInferenceresults?: number, filter?: string, raw?: number, time?: string, options?: any): AxiosPromise<Array<GetInferenceResults200ResponseInner>> {
            return localVarFp.getInferenceResults(deviceId, numberOfInferenceresults, filter, raw, time, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * InsightApi - object-oriented interface
 * @export
 * @class InsightApi
 * @extends {BaseAPI}
 */
export class InsightApi extends BaseAPI {
    /**
     * Export Images.
     * @summary ExportImages
     * @param {string} key Key
     * @param {string} [fromDatetime] From Datetime
     * @param {string} [toDatetime] To Datetime
     * @param {string} [deviceId] Device Id
     * @param {string} [fileFormat] File Format
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InsightApi
     */
    public exportImages(key: string, fromDatetime?: string, toDatetime?: string, deviceId?: string, fileFormat?: string, options?: AxiosRequestConfig) {
        return InsightApiFp(this.configuration).exportImages(key, fromDatetime, toDatetime, deviceId, fileFormat, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Image Directories.
     * @summary GetImageDirectories
     * @param {string} [deviceId] Device Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InsightApi
     */
    public getImageDirectories(deviceId?: string, options?: AxiosRequestConfig) {
        return InsightApiFp(this.configuration).getImageDirectories(deviceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Images.
     * @summary GetImages
     * @param {string} deviceId Device Id
     * @param {string} subDirectoryName Sub Directory Name
     * @param {string} [orderBy] Order By (DESC or ASC)
     * @param {number} [numberOfImages] Number Of Images (0～256)
     * @param {number} [skip] Skip
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InsightApi
     */
    public getImages(deviceId: string, subDirectoryName: string, orderBy?: string, numberOfImages?: number, skip?: number, options?: AxiosRequestConfig) {
        return InsightApiFp(this.configuration).getImages(deviceId, subDirectoryName, orderBy, numberOfImages, skip, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Inference Results.
     * @summary GetInferenceResults
     * @param {string} deviceId Device Id
     * @param {number} [numberOfInferenceresults] NumberOfInferenceresults
     * @param {string} [filter] Filter
     * @param {number} [raw] Raw (0 or 1)
     * @param {string} [time] Time
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InsightApi
     */
    public getInferenceResults(deviceId: string, numberOfInferenceresults?: number, filter?: string, raw?: number, time?: string, options?: AxiosRequestConfig) {
        return InsightApiFp(this.configuration).getInferenceResults(deviceId, numberOfInferenceresults, filter, raw, time, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ManageDevicesApi - axios parameter creator
 * @export
 */
export const ManageDevicesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get Devices
         * @summary GetDevices
         * @param {string} [connectionState] connectionState (Connected or Disconnected)
         * @param {string} [deviceName] device_name
         * @param {string} [deviceId] device_id
         * @param {string} [deviceGroupId] device_group_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDevices: async (connectionState?: string, deviceName?: string, deviceId?: string, deviceGroupId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/devices`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication accessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (connectionState !== undefined) {
                localVarQueryParameter['connectionState'] = connectionState;
            }

            if (deviceName !== undefined) {
                localVarQueryParameter['device_name'] = deviceName;
            }

            if (deviceId !== undefined) {
                localVarQueryParameter['device_id'] = deviceId;
            }

            if (deviceGroupId !== undefined) {
                localVarQueryParameter['device_group_id'] = deviceGroupId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ManageDevicesApi - functional programming interface
 * @export
 */
export const ManageDevicesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ManageDevicesApiAxiosParamCreator(configuration)
    return {
        /**
         * Get Devices
         * @summary GetDevices
         * @param {string} [connectionState] connectionState (Connected or Disconnected)
         * @param {string} [deviceName] device_name
         * @param {string} [deviceId] device_id
         * @param {string} [deviceGroupId] device_group_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDevices(connectionState?: string, deviceName?: string, deviceId?: string, deviceGroupId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetDevices200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDevices(connectionState, deviceName, deviceId, deviceGroupId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ManageDevicesApi - factory interface
 * @export
 */
export const ManageDevicesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ManageDevicesApiFp(configuration)
    return {
        /**
         * Get Devices
         * @summary GetDevices
         * @param {string} [connectionState] connectionState (Connected or Disconnected)
         * @param {string} [deviceName] device_name
         * @param {string} [deviceId] device_id
         * @param {string} [deviceGroupId] device_group_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDevices(connectionState?: string, deviceName?: string, deviceId?: string, deviceGroupId?: string, options?: any): AxiosPromise<GetDevices200Response> {
            return localVarFp.getDevices(connectionState, deviceName, deviceId, deviceGroupId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ManageDevicesApi - object-oriented interface
 * @export
 * @class ManageDevicesApi
 * @extends {BaseAPI}
 */
export class ManageDevicesApi extends BaseAPI {
    /**
     * Get Devices
     * @summary GetDevices
     * @param {string} [connectionState] connectionState (Connected or Disconnected)
     * @param {string} [deviceName] device_name
     * @param {string} [deviceId] device_id
     * @param {string} [deviceGroupId] device_group_id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManageDevicesApi
     */
    public getDevices(connectionState?: string, deviceName?: string, deviceId?: string, deviceGroupId?: string, options?: AxiosRequestConfig) {
        return ManageDevicesApiFp(this.configuration).getDevices(connectionState, deviceName, deviceId, deviceGroupId, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * TrainModelApi - axios parameter creator
 * @export
 */
export const TrainModelApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Delete model.
         * @summary DeleteModel
         * @param {string} modelId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteModel: async (modelId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'modelId' is not null or undefined
            assertParamExists('deleteModel', 'modelId', modelId)
            const localVarPath = `/models/{model_id}`
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication accessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get model status of base.
         * @summary GetBaseModelStatus
         * @param {string} modelId 
         * @param {string} [latestType] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBaseModelStatus: async (modelId: string, latestType?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'modelId' is not null or undefined
            assertParamExists('getBaseModelStatus', 'modelId', modelId)
            const localVarPath = `/models/{model_id}/base`
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication accessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (latestType !== undefined) {
                localVarQueryParameter['latest_type'] = latestType;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * todo
         * @summary GetModels
         * @param {string} [modelId] 
         * @param {string} [comment] 
         * @param {string} [projectName] 
         * @param {string} [modelPlatform] 
         * @param {string} [projectType] 
         * @param {string} [deviceId] 
         * @param {string} [latestType] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getModels: async (modelId?: string, comment?: string, projectName?: string, modelPlatform?: string, projectType?: string, deviceId?: string, latestType?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/models`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication accessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (modelId !== undefined) {
                localVarQueryParameter['model_id'] = modelId;
            }

            if (comment !== undefined) {
                localVarQueryParameter['comment'] = comment;
            }

            if (projectName !== undefined) {
                localVarQueryParameter['project_name'] = projectName;
            }

            if (modelPlatform !== undefined) {
                localVarQueryParameter['model_platform'] = modelPlatform;
            }

            if (projectType !== undefined) {
                localVarQueryParameter['project_type'] = projectType;
            }

            if (deviceId !== undefined) {
                localVarQueryParameter['device_id'] = deviceId;
            }

            if (latestType !== undefined) {
                localVarQueryParameter['latest_type'] = latestType;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Import base model.
         * @summary ImportBaseModel
         * @param {TrainModelImportBaseModelDataImportbasemodelindtoJsonBody} trainModelImportBaseModelDataImportbasemodelindtoJsonBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        importBaseModel: async (trainModelImportBaseModelDataImportbasemodelindtoJsonBody: TrainModelImportBaseModelDataImportbasemodelindtoJsonBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'trainModelImportBaseModelDataImportbasemodelindtoJsonBody' is not null or undefined
            assertParamExists('importBaseModel', 'trainModelImportBaseModelDataImportbasemodelindtoJsonBody', trainModelImportBaseModelDataImportbasemodelindtoJsonBody)
            const localVarPath = `/models`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication accessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(trainModelImportBaseModelDataImportbasemodelindtoJsonBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Publish Model.
         * @summary PublishModel
         * @param {string} modelId 
         * @param {string} [deviceId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        publishModel: async (modelId: string, deviceId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'modelId' is not null or undefined
            assertParamExists('publishModel', 'modelId', modelId)
            const localVarPath = `/models/{model_id}`
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication accessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (deviceId !== undefined) {
                localVarQueryParameter['device_id'] = deviceId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TrainModelApi - functional programming interface
 * @export
 */
export const TrainModelApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TrainModelApiAxiosParamCreator(configuration)
    return {
        /**
         * Delete model.
         * @summary DeleteModel
         * @param {string} modelId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteModel(modelId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteModel(modelId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get model status of base.
         * @summary GetBaseModelStatus
         * @param {string} modelId 
         * @param {string} [latestType] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBaseModelStatus(modelId: string, latestType?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Model>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBaseModelStatus(modelId, latestType, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * todo
         * @summary GetModels
         * @param {string} [modelId] 
         * @param {string} [comment] 
         * @param {string} [projectName] 
         * @param {string} [modelPlatform] 
         * @param {string} [projectType] 
         * @param {string} [deviceId] 
         * @param {string} [latestType] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getModels(modelId?: string, comment?: string, projectName?: string, modelPlatform?: string, projectType?: string, deviceId?: string, latestType?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetModels200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getModels(modelId, comment, projectName, modelPlatform, projectType, deviceId, latestType, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Import base model.
         * @summary ImportBaseModel
         * @param {TrainModelImportBaseModelDataImportbasemodelindtoJsonBody} trainModelImportBaseModelDataImportbasemodelindtoJsonBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async importBaseModel(trainModelImportBaseModelDataImportbasemodelindtoJsonBody: TrainModelImportBaseModelDataImportbasemodelindtoJsonBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.importBaseModel(trainModelImportBaseModelDataImportbasemodelindtoJsonBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Publish Model.
         * @summary PublishModel
         * @param {string} modelId 
         * @param {string} [deviceId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async publishModel(modelId: string, deviceId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PublishModel200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.publishModel(modelId, deviceId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TrainModelApi - factory interface
 * @export
 */
export const TrainModelApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TrainModelApiFp(configuration)
    return {
        /**
         * Delete model.
         * @summary DeleteModel
         * @param {string} modelId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteModel(modelId: string, options?: any): AxiosPromise<SuccessResponse> {
            return localVarFp.deleteModel(modelId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get model status of base.
         * @summary GetBaseModelStatus
         * @param {string} modelId 
         * @param {string} [latestType] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBaseModelStatus(modelId: string, latestType?: string, options?: any): AxiosPromise<Model> {
            return localVarFp.getBaseModelStatus(modelId, latestType, options).then((request) => request(axios, basePath));
        },
        /**
         * todo
         * @summary GetModels
         * @param {string} [modelId] 
         * @param {string} [comment] 
         * @param {string} [projectName] 
         * @param {string} [modelPlatform] 
         * @param {string} [projectType] 
         * @param {string} [deviceId] 
         * @param {string} [latestType] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getModels(modelId?: string, comment?: string, projectName?: string, modelPlatform?: string, projectType?: string, deviceId?: string, latestType?: string, options?: any): AxiosPromise<GetModels200Response> {
            return localVarFp.getModels(modelId, comment, projectName, modelPlatform, projectType, deviceId, latestType, options).then((request) => request(axios, basePath));
        },
        /**
         * Import base model.
         * @summary ImportBaseModel
         * @param {TrainModelImportBaseModelDataImportbasemodelindtoJsonBody} trainModelImportBaseModelDataImportbasemodelindtoJsonBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        importBaseModel(trainModelImportBaseModelDataImportbasemodelindtoJsonBody: TrainModelImportBaseModelDataImportbasemodelindtoJsonBody, options?: any): AxiosPromise<SuccessResponse> {
            return localVarFp.importBaseModel(trainModelImportBaseModelDataImportbasemodelindtoJsonBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Publish Model.
         * @summary PublishModel
         * @param {string} modelId 
         * @param {string} [deviceId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        publishModel(modelId: string, deviceId?: string, options?: any): AxiosPromise<PublishModel200Response> {
            return localVarFp.publishModel(modelId, deviceId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TrainModelApi - object-oriented interface
 * @export
 * @class TrainModelApi
 * @extends {BaseAPI}
 */
export class TrainModelApi extends BaseAPI {
    /**
     * Delete model.
     * @summary DeleteModel
     * @param {string} modelId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TrainModelApi
     */
    public deleteModel(modelId: string, options?: AxiosRequestConfig) {
        return TrainModelApiFp(this.configuration).deleteModel(modelId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get model status of base.
     * @summary GetBaseModelStatus
     * @param {string} modelId 
     * @param {string} [latestType] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TrainModelApi
     */
    public getBaseModelStatus(modelId: string, latestType?: string, options?: AxiosRequestConfig) {
        return TrainModelApiFp(this.configuration).getBaseModelStatus(modelId, latestType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * todo
     * @summary GetModels
     * @param {string} [modelId] 
     * @param {string} [comment] 
     * @param {string} [projectName] 
     * @param {string} [modelPlatform] 
     * @param {string} [projectType] 
     * @param {string} [deviceId] 
     * @param {string} [latestType] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TrainModelApi
     */
    public getModels(modelId?: string, comment?: string, projectName?: string, modelPlatform?: string, projectType?: string, deviceId?: string, latestType?: string, options?: AxiosRequestConfig) {
        return TrainModelApiFp(this.configuration).getModels(modelId, comment, projectName, modelPlatform, projectType, deviceId, latestType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Import base model.
     * @summary ImportBaseModel
     * @param {TrainModelImportBaseModelDataImportbasemodelindtoJsonBody} trainModelImportBaseModelDataImportbasemodelindtoJsonBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TrainModelApi
     */
    public importBaseModel(trainModelImportBaseModelDataImportbasemodelindtoJsonBody: TrainModelImportBaseModelDataImportbasemodelindtoJsonBody, options?: AxiosRequestConfig) {
        return TrainModelApiFp(this.configuration).importBaseModel(trainModelImportBaseModelDataImportbasemodelindtoJsonBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Publish Model.
     * @summary PublishModel
     * @param {string} modelId 
     * @param {string} [deviceId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TrainModelApi
     */
    public publishModel(modelId: string, deviceId?: string, options?: AxiosRequestConfig) {
        return TrainModelApiFp(this.configuration).publishModel(modelId, deviceId, options).then((request) => request(this.axios, this.basePath));
    }
}


